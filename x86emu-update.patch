--- x86emu-0.8/scitech/include/x86emu/fpu_regs.h.orig	2001-08-14 19:35:05.000000000 +0200
+++ x86emu-0.8/scitech/include/x86emu/fpu_regs.h	2008-01-26 19:53:19.113610916 +0100
@@ -41,7 +41,9 @@
 
 #ifdef X86_FPU_SUPPORT
 
-#pragma pack(1)
+#ifdef PACK
+# pragma PACK
+#endif
 
 /* Basic 8087 register can hold any of the following values: */
 
@@ -87,7 +89,9 @@ struct x86_fpu_registers {
     short               x86_fpu_tos, x86_fpu_bos;
     };
 
-#pragma pack()
+#ifdef END_PACK
+# pragma END_PACK
+#endif
 
 /*
  * There are two versions of the following macro.
--- x86emu-0.8/scitech/include/x86emu/regs.h.orig	2001-08-14 19:35:05.000000000 +0200
+++ x86emu-0.8/scitech/include/x86emu/regs.h	2008-01-26 19:55:27.564930940 +0100
@@ -41,7 +41,9 @@
 
 /*---------------------- Macros and type definitions ----------------------*/
 
-#pragma pack(1)
+#ifdef PACK
+# pragma PACK
+#endif
 
 /*
  * General EAX, EBX, ECX, EDX type registers.  Note that for
@@ -271,8 +273,7 @@ typedef struct {
      *  Extern interrupt        1 bits
      *  Halted                  1 bits
      */
-    long                        mode;
-    u8                          intno;
+    u32                         mode;
     volatile int                intr;   /* mask of pending interrupts */
     int                         debug;
 #ifdef DEBUG
@@ -284,6 +285,8 @@ typedef struct {
     char                        decode_buf[32]; /* encoded byte stream  */
     char                        decoded_buf[256]; /* disassembled strings */
 #endif
+    u8                          intno;
+    u8                          __pad[3];
     } X86EMU_regs;
 
 /****************************************************************************
@@ -296,10 +299,10 @@ mem_base        - Base real mode memory 
 mem_size        - Size of the real mode memory block for the emulator
 ****************************************************************************/
 typedef struct {
-    X86EMU_regs     x86;
     unsigned long   mem_base;
     unsigned long   mem_size;
     void*           private;
+    X86EMU_regs     x86;
     } X86EMU_sysEnv;
 
 #pragma pack()
--- x86emu-0.8/scitech/include/x86emu/types.h.orig	2001-08-14 19:35:05.000000000 +0200
+++ x86emu-0.8/scitech/include/x86emu/types.h	2008-01-26 20:02:54.054374923 +0100
@@ -39,32 +39,67 @@
 #ifndef __X86EMU_TYPES_H
 #define __X86EMU_TYPES_H
 
+#ifndef NO_SYS_HEADERS
 #include <sys/types.h>
+#endif
+
+/*
+ * The following kludge is an attempt to work around typedef conflicts with
+ * <sys/types.h>.
+ */
+#define u8   x86emuu8
+#define u16  x86emuu16
+#define u32  x86emuu32
+#define u64  x86emuu64
+#define s8   x86emus8
+#define s16  x86emus16
+#define s32  x86emus32
+#define s64  x86emus64
+#define uint x86emuuint
+#define sint x86emusint
 
 /*---------------------- Macros and type definitions ----------------------*/
 
 /* Currently only for Linux/32bit */
+#undef  __HAS_LONG_LONG__
 #if defined(__GNUC__) && !defined(NO_LONG_LONG)
 #define __HAS_LONG_LONG__
 #endif
 
+/* Taken from Xmd.h */
+#undef NUM32
+#if defined (_LP64) || \
+    defined(__alpha) || defined(__alpha__) || \
+    defined(__ia64__) || defined(ia64) || \
+    defined(__sparc64__) || \
+    defined(__s390x__) || \
+    (defined(__hppa__) && defined(__LP64)) || \
+    defined(__amd64__) || defined(amd64) || \
+    (defined(__sgi) && (_MIPS_SZLONG == 64))
+#define NUM32 int
+#else
+#define NUM32 long
+#endif
+
 typedef unsigned char       u8;
 typedef unsigned short      u16;
-typedef unsigned int        u32;
+typedef unsigned NUM32      u32;
 #ifdef __HAS_LONG_LONG__
 typedef unsigned long long  u64;
 #endif
 
 typedef char                s8;
 typedef short               s16;
-typedef long                s32;
+typedef NUM32               s32;
 #ifdef __HAS_LONG_LONG__
 typedef long long           s64;
 #endif
 
-/*typedef unsigned int      uint;*/
+typedef unsigned int        uint;
 typedef int                 sint;
 
 typedef u16 X86EMU_pioAddr;
 
+#undef NUM32
+
 #endif  /* __X86EMU_TYPES_H */
--- x86emu-0.8/scitech/include/x86emu.h.orig	2001-08-14 19:35:05.000000000 +0200
+++ x86emu-0.8/scitech/include/x86emu.h	2008-01-26 19:51:50.528562742 +0100
@@ -55,7 +55,9 @@ typedef int X86EMU_pioAddr;
 
 /*---------------------- Macros and type definitions ----------------------*/
 
-#pragma pack(1)
+#ifdef PACK
+# pragma	PACK   /* Don't pack structs with function pointers! */
+#endif
 
 /****************************************************************************
 REMARKS:
@@ -129,7 +131,9 @@ extern void X86API wrb(u32 addr, u8 val)
 extern void X86API wrw(u32 addr, u16 val);
 extern void X86API wrl(u32 addr, u32 val);
 
-#pragma pack()
+#ifdef END_PACK
+# pragma	END_PACK
+#endif
 
 /*--------------------- type definitions -----------------------------------*/
 
--- x86emu-0.8/scitech/src/x86emu/x86emu/prim_ops.h.orig	2001-08-14 19:35:06.000000000 +0200
+++ x86emu-0.8/scitech/src/x86emu/x86emu/prim_ops.h	2008-01-26 20:07:16.297319297 +0100
@@ -39,8 +39,6 @@
 #ifndef __X86EMU_PRIM_OPS_H
 #define __X86EMU_PRIM_OPS_H
 
-#include "x86emu/prim_asm.h"
-
 #ifdef  __cplusplus
 extern "C" {            			/* Use "C" linkage when in C++ mode */
 #endif
@@ -136,7 +134,7 @@ void    push_long (u32 w);
 u16     pop_word (void);
 u32		pop_long (void);
 
-#if  defined(__HAVE_INLINE_ASSEMBLER__) && !defined(PRIM_OPS_NO_REDEFINE_ASM)
+#if  0
 
 #define	aaa_word(d)		aaa_word_asm(&M.x86.R_EFLG,d)
 #define aas_word(d)		aas_word_asm(&M.x86.R_EFLG,d)
--- x86emu-0.8/scitech/src/x86emu/x86emu/x86emui.h.orig	2001-08-14 19:35:06.000000000 +0200
+++ x86emu-0.8/scitech/src/x86emu/x86emu/x86emui.h	2008-01-26 20:08:31.841624321 +0100
@@ -68,8 +68,12 @@
 #include "x86emu/prim_ops.h"
 #include "x86emu/fpu.h"
 #include "x86emu/fpu_regs.h"
+
+#ifndef NO_SYS_HEADERS
 #include <stdio.h>
+#include <stdlib.h>
 #include <string.h>
+#endif                                                                                           
 
 /*--------------------------- Inline Functions ----------------------------*/
 
--- x86emu-0.8/scitech/src/x86emu/debug.c.orig	2001-08-14 19:35:06.000000000 +0200
+++ x86emu-0.8/scitech/src/x86emu/debug.c	2008-01-26 20:09:37.853386118 +0100
@@ -38,8 +38,12 @@
 ****************************************************************************/
 
 #include "x86emu/x86emui.h"
+#include <stdio.h>
+#include <string.h>
+#ifndef NO_SYS_HEADERS
 #include <stdarg.h>
 #include <stdlib.h>
+#endif
 
 /*----------------------------- Implementation ----------------------------*/
 
--- x86emu-0.8/scitech/src/x86emu/decode.c.orig	2001-08-14 19:35:06.000000000 +0200
+++ x86emu-0.8/scitech/src/x86emu/decode.c	2008-01-26 20:17:11.595243392 +0100
@@ -37,6 +37,7 @@
 *
 ****************************************************************************/
 
+#include <stdlib.h>
 #include "x86emu/x86emui.h"
 
 /*----------------------------- Implementation ----------------------------*/
@@ -102,8 +103,14 @@ DB(		if (CHECK_IP_FETCH())
 		INC_DECODED_INST_LEN(1);
 		if (M.x86.intr) {
 		      if (M.x86.intr & INTR_HALTED) {
-DB(				printk("halted\n");
-				X86EMU_trace_regs();)
+DB(             if (M.x86.R_SP != 0) {
+                    printk("halted\n");
+                    X86EMU_trace_regs();
+                    }
+                else {
+                    if (M.x86.debug)
+                        printk("Service completed successfully\n");
+                    })
 				return;
             }
 			if (((M.x86.intr & INTR_SYNCH) && (M.x86.intno == 0 || M.x86.intno == 2)) ||
@@ -701,7 +708,11 @@ u16* decode_rm_seg_register(
 		DECODE_PRINTF("DS");
 		return &M.x86.R_DS;
 	  case 4:
+		DECODE_PRINTF("FS");
+		return &M.x86.R_FS;
 	  case 5:
+		DECODE_PRINTF("GS");
+		return &M.x86.R_GS;
 	  case 6:
 	  case 7:
 		DECODE_PRINTF("ILLEGAL SEGREG");
@@ -711,6 +722,99 @@ u16* decode_rm_seg_register(
 	return NULL;                /* NOT REACHED OR REACHED ON ERROR */
 }
 
+/*
+ *
+ * return offset from the SIB Byte
+ */
+u32 decode_sib_address(int sib, int mod)
+{
+    u32 base = 0, i = 0, scale = 1;
+
+    switch(sib & 0x07) {
+    case 0:
+	DECODE_PRINTF("[EAX]");
+	base = M.x86.R_EAX;
+	break;
+    case 1:
+	DECODE_PRINTF("[ECX]");
+	base = M.x86.R_ECX;
+	break;
+    case 2:
+	DECODE_PRINTF("[EDX]");
+	base = M.x86.R_EDX;
+	break;
+    case 3:
+	DECODE_PRINTF("[EBX]");
+	base = M.x86.R_EBX;
+	break;
+    case 4:
+	DECODE_PRINTF("[ESP]");
+	base = M.x86.R_ESP;
+	M.x86.mode |= SYSMODE_SEG_DS_SS;
+	break;
+    case 5:
+	if (mod == 0) {
+	    base = fetch_long_imm();
+	    DECODE_PRINTF2("%08x", base);
+	} else {
+	    DECODE_PRINTF("[EBP]");
+	    base = M.x86.R_ESP;
+	    M.x86.mode |= SYSMODE_SEG_DS_SS;
+	}
+	break;
+    case 6:
+	DECODE_PRINTF("[ESI]");
+	base = M.x86.R_ESI;
+	break;
+    case 7:
+	DECODE_PRINTF("[EDI]");
+	base = M.x86.R_EDI;
+	break;
+    }
+    switch ((sib >> 3) & 0x07) {
+    case 0:
+	DECODE_PRINTF("[EAX");
+	i = M.x86.R_EAX;
+	break;
+    case 1:
+	DECODE_PRINTF("[ECX");
+	i = M.x86.R_ECX;
+	break;
+    case 2:
+	DECODE_PRINTF("[EDX");
+	i = M.x86.R_EDX;
+	break;
+    case 3:
+	DECODE_PRINTF("[EBX");
+	i = M.x86.R_EBX;
+	break;
+    case 4:
+	i = 0;
+	break;
+    case 5:
+	DECODE_PRINTF("[EBP");
+	i = M.x86.R_EBP;
+	break;
+    case 6:
+	DECODE_PRINTF("[ESI");
+	i = M.x86.R_ESI;
+	break;
+    case 7:
+	DECODE_PRINTF("[EDI");
+	i = M.x86.R_EDI;
+	break;
+    }
+    scale = 1 << ((sib >> 6) & 0x03);
+    if (((sib >> 3) & 0x07) != 4) {
+	if (scale == 1) {
+	    DECODE_PRINTF("]");
+	} else {
+	    DECODE_PRINTF2("*%d]", scale);
+	}
+    }
+    return base + (i * scale);
+}
+
 /****************************************************************************
 PARAMETERS:
 rm	- RM value to decode
@@ -731,26 +835,59 @@ NOTE: 	The code which specifies the corr
 		if a SS access is needed, set this bit.  Otherwise, DS access
 		occurs (unless any of the segment override bits are set).
 ****************************************************************************/
-unsigned decode_rm00_address(
+u32 decode_rm00_address(
 	int rm)
 {
-	unsigned offset;
+	u32 offset;
+    int sib;
 
+    if (M.x86.mode & SYSMODE_PREFIX_ADDR) {
+        /* 32-bit addressing */
+	switch (rm) {
+	  case 0:
+		DECODE_PRINTF("[EAX]");
+		return M.x86.R_EAX;
+	  case 1:
+		DECODE_PRINTF("[ECX]");
+		return M.x86.R_ECX;
+	  case 2:
+		DECODE_PRINTF("[EDX]");
+		return M.x86.R_EDX;
+	  case 3:
+		DECODE_PRINTF("[EBX]");
+		return M.x86.R_EBX;
+	  case 4:
+		sib = fetch_byte_imm();
+		return decode_sib_address(sib, 0);
+	  case 5:
+		offset = fetch_long_imm();
+		DECODE_PRINTF2("[%08x]", offset);
+		return offset;
+	  case 6:
+		DECODE_PRINTF("[ESI]");
+		return M.x86.R_ESI;
+	  case 7:
+		DECODE_PRINTF("[EDI]");
+		return M.x86.R_EDI;
+	}
+	HALT_SYS();
+    } else {
+        /* 16-bit addressing */
 	switch (rm) {
       case 0:
 		DECODE_PRINTF("[BX+SI]");
-		return M.x86.R_BX + M.x86.R_SI;
+		return (M.x86.R_BX + M.x86.R_SI) & 0xffff;
 	  case 1:
 		DECODE_PRINTF("[BX+DI]");
-		return M.x86.R_BX + M.x86.R_DI;
+		return (M.x86.R_BX + M.x86.R_DI) & 0xffff;
 	  case 2:
 		DECODE_PRINTF("[BP+SI]");
 		M.x86.mode |= SYSMODE_SEG_DS_SS;
-		return M.x86.R_BP + M.x86.R_SI;
+		return (M.x86.R_BP + M.x86.R_SI) & 0xffff;
 	  case 3:
 		DECODE_PRINTF("[BP+DI]");
 		M.x86.mode |= SYSMODE_SEG_DS_SS;
-		return M.x86.R_BP + M.x86.R_DI;
+		return (M.x86.R_BP + M.x86.R_DI) & 0xffff;
 	  case 4:
 		DECODE_PRINTF("[SI]");
 		return M.x86.R_SI;
@@ -766,6 +903,7 @@ unsigned decode_rm00_address(
 		return M.x86.R_BX;
 	}
 	HALT_SYS();
+	}
     return 0;
 }
 
@@ -780,40 +918,80 @@ REMARKS:
 Return the offset given by mod=01 addressing.  Also enables the
 decoding of instructions.
 ****************************************************************************/
-unsigned decode_rm01_address(
+u32 decode_rm01_address(
 	int rm)
 {
-	int displacement = (s8)fetch_byte_imm();
+    int displacement = 0;
+    int sib;
+
+    /* Fetch disp8 if no SIB byte */
+    if (!((M.x86.mode & SYSMODE_PREFIX_ADDR) && (rm == 4)))
+	displacement = (s8)fetch_byte_imm();
+
+    if (M.x86.mode & SYSMODE_PREFIX_ADDR) {
+        /* 32-bit addressing */
+	switch (rm) {
+	  case 0:
+		DECODE_PRINTF2("%d[EAX]", displacement);
+		return M.x86.R_EAX + displacement;
+	  case 1:
+		DECODE_PRINTF2("%d[ECX]", displacement);
+		return M.x86.R_ECX + displacement;
+	  case 2:
+		DECODE_PRINTF2("%d[EDX]", displacement);
+		return M.x86.R_EDX + displacement;
+	  case 3:
+		DECODE_PRINTF2("%d[EBX]", displacement);
+		return M.x86.R_EBX + displacement;
+	  case 4:
+		sib = fetch_byte_imm();
+		displacement = (s8)fetch_byte_imm();
+		DECODE_PRINTF2("%d", displacement);
+		return decode_sib_address(sib, 1) + displacement;
+	  case 5:
+		DECODE_PRINTF2("%d[EBP]", displacement);
+		return M.x86.R_EBP + displacement;
+	  case 6:
+		DECODE_PRINTF2("%d[ESI]", displacement);
+		return M.x86.R_ESI + displacement;
+	  case 7:
+		DECODE_PRINTF2("%d[EDI]", displacement);
+		return M.x86.R_EDI + displacement;
+	}
+	HALT_SYS();
+    } else {
+        /* 16-bit addressing */
 	switch (rm) {
       case 0:
 		DECODE_PRINTF2("%d[BX+SI]", displacement);
-		return M.x86.R_BX + M.x86.R_SI + displacement;
+		return (M.x86.R_BX + M.x86.R_SI + displacement) & 0xffff;
 	  case 1:
 		DECODE_PRINTF2("%d[BX+DI]", displacement);
-		return M.x86.R_BX + M.x86.R_DI + displacement;
+		return (M.x86.R_BX + M.x86.R_DI + displacement) & 0xffff;
 	  case 2:
 		DECODE_PRINTF2("%d[BP+SI]", displacement);
 		M.x86.mode |= SYSMODE_SEG_DS_SS;
-		return M.x86.R_BP + M.x86.R_SI + displacement;
+		return (M.x86.R_BP + M.x86.R_SI + displacement) & 0xffff;
 	  case 3:
 		DECODE_PRINTF2("%d[BP+DI]", displacement);
 		M.x86.mode |= SYSMODE_SEG_DS_SS;
-		return M.x86.R_BP + M.x86.R_DI + displacement;
+		return (M.x86.R_BP + M.x86.R_DI + displacement) & 0xffff;
 	  case 4:
 		DECODE_PRINTF2("%d[SI]", displacement);
-		return M.x86.R_SI + displacement;
+		return (M.x86.R_SI + displacement) & 0xffff;
 	  case 5:
 		DECODE_PRINTF2("%d[DI]", displacement);
-		return M.x86.R_DI + displacement;
+		return (M.x86.R_DI + displacement) & 0xffff;
 	  case 6:
 		DECODE_PRINTF2("%d[BP]", displacement);
 		M.x86.mode |= SYSMODE_SEG_DS_SS;
-		return M.x86.R_BP + displacement;
+		return (M.x86.R_BP + displacement) & 0xffff;
 	  case 7:
 		DECODE_PRINTF2("%d[BX]", displacement);
-		return M.x86.R_BX + displacement;
+		return (M.x86.R_BX + displacement) & 0xffff;
 	}
 	HALT_SYS();
+	}
     return 0;                   /* SHOULD NOT HAPPEN */
 }
 
@@ -828,10 +1006,56 @@ REMARKS:
 Return the offset given by mod=10 addressing.  Also enables the
 decoding of instructions.
 ****************************************************************************/
-unsigned decode_rm10_address(
+u32 decode_rm10_address(
 	int rm)
 {
-    int displacement = (s16)fetch_word_imm(); 
+    u32 displacement = 0;
+    int sib;
+
+    /* Fetch disp16 if 16-bit addr mode */
+    if (!(M.x86.mode & SYSMODE_PREFIX_ADDR))
+	displacement = (u16)fetch_word_imm();
+    else {
+	/* Fetch disp32 if no SIB byte */
+	if (rm != 4)
+	    displacement = (u32)fetch_long_imm();
+    }
+
+    if (M.x86.mode & SYSMODE_PREFIX_ADDR) {
+        /* 32-bit addressing */
+      switch (rm) {
+	  case 0:
+		DECODE_PRINTF2("%08x[EAX]", displacement);
+		return M.x86.R_EAX + displacement;
+	  case 1:
+		DECODE_PRINTF2("%08x[ECX]", displacement);
+		return M.x86.R_ECX + displacement;
+	  case 2:
+		DECODE_PRINTF2("%08x[EDX]", displacement);
+		M.x86.mode |= SYSMODE_SEG_DS_SS;
+		return M.x86.R_EDX + displacement;
+	  case 3:
+		DECODE_PRINTF2("%08x[EBX]", displacement);
+		return M.x86.R_EBX + displacement;
+	  case 4:
+		sib = fetch_byte_imm();
+		displacement = (u32)fetch_long_imm();
+		DECODE_PRINTF2("%08x", displacement);
+		return decode_sib_address(sib, 2) + displacement;
+		break;
+	  case 5:
+		DECODE_PRINTF2("%08x[EBP]", displacement);
+		return M.x86.R_EBP + displacement;
+	  case 6:
+		DECODE_PRINTF2("%08x[ESI]", displacement);
+		return M.x86.R_ESI + displacement;
+	  case 7:
+		DECODE_PRINTF2("%08x[EDI]", displacement);
+		return M.x86.R_EDI + displacement;
+	}
+	HALT_SYS();
+    } else {
+        /* 16-bit addressing */
 	switch (rm) {
       case 0:
 		DECODE_PRINTF2("%d[BX+SI]", displacement);
@@ -862,6 +1086,7 @@ unsigned decode_rm10_address(
 		return (M.x86.R_BX + displacement) & 0xffff;
 	}
 	HALT_SYS();
+	}
     return 0;
     /*NOTREACHED */
 }
--- x86emu-0.8/scitech/src/x86emu/fpu.c.orig	2001-08-14 19:35:06.000000000 +0200
+++ x86emu-0.8/scitech/src/x86emu/fpu.c	2008-01-26 20:19:21.386639783 +0100
@@ -95,8 +95,8 @@ static char *x86emu_fpu_op_d9_tab1[] = {
 void x86emuOp_esc_coprocess_d9(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
-	uint destoffset;
-    u8 stkelem;
+	uint destoffset = 0;
+    u8 stkelem = 0;
 
     START_OF_INSTR();
     FETCH_DECODE_MODRM(mod, rh, rl);
@@ -322,8 +322,8 @@ char *x86emu_fpu_op_da_tab[] = {
 void x86emuOp_esc_coprocess_da(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
-	uint destoffset;
-    u8 stkelem;
+	uint destoffset = 0;
+    u8 stkelem = 0;
 
     START_OF_INSTR();
     FETCH_DECODE_MODRM(mod, rh, rl);
@@ -403,7 +403,7 @@ char *x86emu_fpu_op_db_tab[] = {
 void x86emuOp_esc_coprocess_db(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
-	uint destoffset;
+	uint destoffset = 0;
 
     START_OF_INSTR();
     FETCH_DECODE_MODRM(mod, rh, rl);
@@ -530,8 +530,8 @@ char *x86emu_fpu_op_dc_tab[] = {
 void x86emuOp_esc_coprocess_dc(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
-	uint destoffset;
-    u8 stkelem;
+	uint destoffset = 0;
+    u8 stkelem = 0;
 
     START_OF_INSTR();
     FETCH_DECODE_MODRM(mod, rh, rl);
@@ -640,8 +640,8 @@ static char *x86emu_fpu_op_dd_tab[] = {
 void x86emuOp_esc_coprocess_dd(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
-	uint destoffset;
-    u8 stkelem;
+	uint destoffset = 0;
+    u8 stkelem = 0;
 
     START_OF_INSTR();
     FETCH_DECODE_MODRM(mod, rh, rl);
@@ -747,8 +747,8 @@ static char *x86emu_fpu_op_de_tab[] =
 void x86emuOp_esc_coprocess_de(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
-	uint destoffset;
-    u8 stkelem;
+	uint destoffset = 0;
+    u8 stkelem = 0;
 
     START_OF_INSTR();
     FETCH_DECODE_MODRM(mod, rh, rl);
@@ -866,8 +866,8 @@ static char *x86emu_fpu_op_df_tab[] = {
 void x86emuOp_esc_coprocess_df(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
-	uint destoffset;
-    u8 stkelem;
+	uint destoffset = 0;
+    u8 stkelem = 0;
 
     START_OF_INSTR();
     FETCH_DECODE_MODRM(mod, rh, rl);
--- x86emu-0.8/scitech/src/x86emu/ops.c.orig	2001-08-14 19:35:06.000000000 +0200
+++ x86emu-0.8/scitech/src/x86emu/ops.c	2008-01-26 20:33:53.532340533 +0100
@@ -81,15 +81,26 @@ op1 - Instruction op code
 REMARKS:
 Handles illegal opcodes.
 ****************************************************************************/
-void x86emuOp_illegal_op(
+static void x86emuOp_illegal_op(
     u8 op1)
 {
     START_OF_INSTR();
+    if (M.x86.R_SP != 0) {
     DECODE_PRINTF("ILLEGAL X86 OPCODE\n");
     TRACE_REGS();
-    printk("%04x:%04x: %02X ILLEGAL X86 OPCODE!\n",
-        M.x86.R_CS, M.x86.R_IP-1,op1);
+    DB( printk("%04x:%04x: %02X ILLEGAL X86 OPCODE!\n",
+        M.x86.R_CS, M.x86.R_IP-1,op1));
     HALT_SYS();
+    }
+    else {
+        /* If we get here, it means the stack pointer is back to zero
+         * so we are just returning from an emulator service call
+         * so therte is no need to display an error message. We trap
+         * the emulator with an 0xF1 opcode to finish the service
+         * call.
+         */
+        X86EMU_halt_sys();
+        }
     END_OF_INSTR();
 }
 
@@ -97,7 +108,7 @@ void x86emuOp_illegal_op(
 REMARKS:
 Handles opcode 0x00
 ****************************************************************************/
-void x86emuOp_add_byte_RM_R(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_add_byte_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -155,7 +166,7 @@ void x86emuOp_add_byte_RM_R(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x01
 ****************************************************************************/
-void x86emuOp_add_word_RM_R(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_add_word_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -275,7 +286,7 @@ void x86emuOp_add_word_RM_R(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x02
 ****************************************************************************/
-void x86emuOp_add_byte_R_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_add_byte_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -330,7 +341,7 @@ void x86emuOp_add_byte_R_RM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x03
 ****************************************************************************/
-void x86emuOp_add_word_R_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_add_word_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -444,7 +455,7 @@ void x86emuOp_add_word_R_RM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x04
 ****************************************************************************/
-void x86emuOp_add_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_add_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 srcval;
 
@@ -462,7 +473,7 @@ void x86emuOp_add_byte_AL_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0x05
 ****************************************************************************/
-void x86emuOp_add_word_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_add_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -489,7 +500,7 @@ void x86emuOp_add_word_AX_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0x06
 ****************************************************************************/
-void x86emuOp_push_ES(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_push_ES(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("PUSH\tES\n");
@@ -503,7 +514,7 @@ void x86emuOp_push_ES(u8 X86EMU_UNUSED(o
 REMARKS:
 Handles opcode 0x07
 ****************************************************************************/
-void x86emuOp_pop_ES(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_pop_ES(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("POP\tES\n");
@@ -517,7 +528,7 @@ void x86emuOp_pop_ES(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x08
 ****************************************************************************/
-void x86emuOp_or_byte_RM_R(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_or_byte_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -575,7 +586,7 @@ void x86emuOp_or_byte_RM_R(u8 X86EMU_UNU
 REMARKS:
 Handles opcode 0x09
 ****************************************************************************/
-void x86emuOp_or_word_RM_R(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_or_word_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -695,7 +706,7 @@ void x86emuOp_or_word_RM_R(u8 X86EMU_UNU
 REMARKS:
 Handles opcode 0x0a
 ****************************************************************************/
-void x86emuOp_or_byte_R_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_or_byte_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -750,7 +761,7 @@ void x86emuOp_or_byte_R_RM(u8 X86EMU_UNU
 REMARKS:
 Handles opcode 0x0b
 ****************************************************************************/
-void x86emuOp_or_word_R_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_or_word_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -864,7 +875,7 @@ void x86emuOp_or_word_R_RM(u8 X86EMU_UNU
 REMARKS:
 Handles opcode 0x0c
 ****************************************************************************/
-void x86emuOp_or_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_or_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 srcval;
 
@@ -882,7 +893,7 @@ void x86emuOp_or_byte_AL_IMM(u8 X86EMU_U
 REMARKS:
 Handles opcode 0x0d
 ****************************************************************************/
-void x86emuOp_or_word_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_or_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -909,7 +920,7 @@ void x86emuOp_or_word_AX_IMM(u8 X86EMU_U
 REMARKS:
 Handles opcode 0x0e
 ****************************************************************************/
-void x86emuOp_push_CS(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_push_CS(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("PUSH\tCS\n");
@@ -923,7 +934,7 @@ void x86emuOp_push_CS(u8 X86EMU_UNUSED(o
 REMARKS:
 Handles opcode 0x0f. Escape for two-byte opcode (286 or better)
 ****************************************************************************/
-void x86emuOp_two_byte(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_two_byte(u8 X86EMU_UNUSED(op1))
 {
     u8 op2 = (*sys_rdb)(((u32)M.x86.R_CS << 4) + (M.x86.R_IP++));
     INC_DECODED_INST_LEN(1);
@@ -934,7 +945,7 @@ void x86emuOp_two_byte(u8 X86EMU_UNUSED(
 REMARKS:
 Handles opcode 0x10
 ****************************************************************************/
-void x86emuOp_adc_byte_RM_R(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_adc_byte_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -992,7 +1003,7 @@ void x86emuOp_adc_byte_RM_R(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x11
 ****************************************************************************/
-void x86emuOp_adc_word_RM_R(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_adc_word_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -1112,7 +1123,7 @@ void x86emuOp_adc_word_RM_R(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x12
 ****************************************************************************/
-void x86emuOp_adc_byte_R_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_adc_byte_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -1167,7 +1178,7 @@ void x86emuOp_adc_byte_R_RM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x13
 ****************************************************************************/
-void x86emuOp_adc_word_R_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_adc_word_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -1281,7 +1292,7 @@ void x86emuOp_adc_word_R_RM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x14
 ****************************************************************************/
-void x86emuOp_adc_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_adc_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 srcval;
 
@@ -1299,7 +1310,7 @@ void x86emuOp_adc_byte_AL_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0x15
 ****************************************************************************/
-void x86emuOp_adc_word_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_adc_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -1326,7 +1337,7 @@ void x86emuOp_adc_word_AX_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0x16
 ****************************************************************************/
-void x86emuOp_push_SS(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_push_SS(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("PUSH\tSS\n");
@@ -1340,7 +1351,7 @@ void x86emuOp_push_SS(u8 X86EMU_UNUSED(o
 REMARKS:
 Handles opcode 0x17
 ****************************************************************************/
-void x86emuOp_pop_SS(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_pop_SS(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("POP\tSS\n");
@@ -1354,7 +1365,7 @@ void x86emuOp_pop_SS(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x18
 ****************************************************************************/
-void x86emuOp_sbb_byte_RM_R(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_sbb_byte_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -1412,7 +1423,7 @@ void x86emuOp_sbb_byte_RM_R(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x19
 ****************************************************************************/
-void x86emuOp_sbb_word_RM_R(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_sbb_word_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -1532,7 +1543,7 @@ void x86emuOp_sbb_word_RM_R(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x1a
 ****************************************************************************/
-void x86emuOp_sbb_byte_R_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_sbb_byte_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -1587,7 +1598,7 @@ void x86emuOp_sbb_byte_R_RM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x1b
 ****************************************************************************/
-void x86emuOp_sbb_word_R_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_sbb_word_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -1701,7 +1712,7 @@ void x86emuOp_sbb_word_R_RM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x1c
 ****************************************************************************/
-void x86emuOp_sbb_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_sbb_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 srcval;
 
@@ -1719,7 +1730,7 @@ void x86emuOp_sbb_byte_AL_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0x1d
 ****************************************************************************/
-void x86emuOp_sbb_word_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_sbb_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -1746,7 +1757,7 @@ void x86emuOp_sbb_word_AX_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0x1e
 ****************************************************************************/
-void x86emuOp_push_DS(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_push_DS(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("PUSH\tDS\n");
@@ -1760,7 +1771,7 @@ void x86emuOp_push_DS(u8 X86EMU_UNUSED(o
 REMARKS:
 Handles opcode 0x1f
 ****************************************************************************/
-void x86emuOp_pop_DS(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_pop_DS(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("POP\tDS\n");
@@ -1774,7 +1785,7 @@ void x86emuOp_pop_DS(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x20
 ****************************************************************************/
-void x86emuOp_and_byte_RM_R(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_and_byte_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -1836,7 +1847,7 @@ void x86emuOp_and_byte_RM_R(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x21
 ****************************************************************************/
-void x86emuOp_and_word_RM_R(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_and_word_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -1956,7 +1967,7 @@ void x86emuOp_and_word_RM_R(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x22
 ****************************************************************************/
-void x86emuOp_and_byte_R_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_and_byte_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -2011,7 +2022,7 @@ void x86emuOp_and_byte_R_RM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x23
 ****************************************************************************/
-void x86emuOp_and_word_R_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_and_word_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -2126,7 +2137,7 @@ void x86emuOp_and_word_R_RM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x24
 ****************************************************************************/
-void x86emuOp_and_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_and_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 srcval;
 
@@ -2144,7 +2155,7 @@ void x86emuOp_and_byte_AL_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0x25
 ****************************************************************************/
-void x86emuOp_and_word_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_and_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -2171,7 +2182,7 @@ void x86emuOp_and_word_AX_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0x26
 ****************************************************************************/
-void x86emuOp_segovr_ES(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_segovr_ES(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("ES:\n");
@@ -2188,7 +2199,7 @@ void x86emuOp_segovr_ES(u8 X86EMU_UNUSED
 REMARKS:
 Handles opcode 0x27
 ****************************************************************************/
-void x86emuOp_daa(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_daa(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("DAA\n");
@@ -2202,7 +2213,7 @@ void x86emuOp_daa(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x28
 ****************************************************************************/
-void x86emuOp_sub_byte_RM_R(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_sub_byte_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -2260,7 +2271,7 @@ void x86emuOp_sub_byte_RM_R(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x29
 ****************************************************************************/
-void x86emuOp_sub_word_RM_R(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_sub_word_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -2380,7 +2391,7 @@ void x86emuOp_sub_word_RM_R(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x2a
 ****************************************************************************/
-void x86emuOp_sub_byte_R_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_sub_byte_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -2435,7 +2446,7 @@ void x86emuOp_sub_byte_R_RM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x2b
 ****************************************************************************/
-void x86emuOp_sub_word_R_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_sub_word_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -2549,7 +2560,7 @@ void x86emuOp_sub_word_R_RM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x2c
 ****************************************************************************/
-void x86emuOp_sub_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_sub_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 srcval;
 
@@ -2567,7 +2578,7 @@ void x86emuOp_sub_byte_AL_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0x2d
 ****************************************************************************/
-void x86emuOp_sub_word_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_sub_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -2594,7 +2605,7 @@ void x86emuOp_sub_word_AX_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0x2e
 ****************************************************************************/
-void x86emuOp_segovr_CS(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_segovr_CS(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("CS:\n");
@@ -2608,7 +2619,7 @@ void x86emuOp_segovr_CS(u8 X86EMU_UNUSED
 REMARKS:
 Handles opcode 0x2f
 ****************************************************************************/
-void x86emuOp_das(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_das(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("DAS\n");
@@ -2622,7 +2633,7 @@ void x86emuOp_das(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x30
 ****************************************************************************/
-void x86emuOp_xor_byte_RM_R(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_xor_byte_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -2680,7 +2691,7 @@ void x86emuOp_xor_byte_RM_R(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x31
 ****************************************************************************/
-void x86emuOp_xor_word_RM_R(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_xor_word_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -2800,7 +2811,7 @@ void x86emuOp_xor_word_RM_R(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x32
 ****************************************************************************/
-void x86emuOp_xor_byte_R_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_xor_byte_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -2855,7 +2866,7 @@ void x86emuOp_xor_byte_R_RM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x33
 ****************************************************************************/
-void x86emuOp_xor_word_R_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_xor_word_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -2969,7 +2980,7 @@ void x86emuOp_xor_word_R_RM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x34
 ****************************************************************************/
-void x86emuOp_xor_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_xor_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 srcval;
 
@@ -2987,7 +2998,7 @@ void x86emuOp_xor_byte_AL_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0x35
 ****************************************************************************/
-void x86emuOp_xor_word_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_xor_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -3014,7 +3025,7 @@ void x86emuOp_xor_word_AX_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0x36
 ****************************************************************************/
-void x86emuOp_segovr_SS(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_segovr_SS(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("SS:\n");
@@ -3028,7 +3039,7 @@ void x86emuOp_segovr_SS(u8 X86EMU_UNUSED
 REMARKS:
 Handles opcode 0x37
 ****************************************************************************/
-void x86emuOp_aaa(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_aaa(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("AAA\n");
@@ -3042,7 +3053,7 @@ void x86emuOp_aaa(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x38
 ****************************************************************************/
-void x86emuOp_cmp_byte_RM_R(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_cmp_byte_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -3097,7 +3108,7 @@ void x86emuOp_cmp_byte_RM_R(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x39
 ****************************************************************************/
-void x86emuOp_cmp_word_RM_R(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_cmp_word_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -3211,7 +3222,7 @@ void x86emuOp_cmp_word_RM_R(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x3a
 ****************************************************************************/
-void x86emuOp_cmp_byte_R_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_cmp_byte_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -3266,7 +3277,7 @@ void x86emuOp_cmp_byte_R_RM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x3b
 ****************************************************************************/
-void x86emuOp_cmp_word_R_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_cmp_word_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -3380,7 +3391,7 @@ void x86emuOp_cmp_word_R_RM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x3c
 ****************************************************************************/
-void x86emuOp_cmp_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_cmp_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 srcval;
 
@@ -3398,7 +3409,7 @@ void x86emuOp_cmp_byte_AL_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0x3d
 ****************************************************************************/
-void x86emuOp_cmp_word_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_cmp_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -3425,7 +3436,7 @@ void x86emuOp_cmp_word_AX_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0x3e
 ****************************************************************************/
-void x86emuOp_segovr_DS(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_segovr_DS(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("DS:\n");
@@ -3439,7 +3450,7 @@ void x86emuOp_segovr_DS(u8 X86EMU_UNUSED
 REMARKS:
 Handles opcode 0x3f
 ****************************************************************************/
-void x86emuOp_aas(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_aas(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("AAS\n");
@@ -3453,7 +3464,7 @@ void x86emuOp_aas(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x40
 ****************************************************************************/
-void x86emuOp_inc_AX(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_inc_AX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3475,7 +3486,7 @@ void x86emuOp_inc_AX(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x41
 ****************************************************************************/
-void x86emuOp_inc_CX(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_inc_CX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3497,7 +3508,7 @@ void x86emuOp_inc_CX(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x42
 ****************************************************************************/
-void x86emuOp_inc_DX(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_inc_DX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3519,7 +3530,7 @@ void x86emuOp_inc_DX(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x43
 ****************************************************************************/
-void x86emuOp_inc_BX(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_inc_BX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3541,7 +3552,7 @@ void x86emuOp_inc_BX(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x44
 ****************************************************************************/
-void x86emuOp_inc_SP(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_inc_SP(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3563,7 +3574,7 @@ void x86emuOp_inc_SP(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x45
 ****************************************************************************/
-void x86emuOp_inc_BP(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_inc_BP(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3585,7 +3596,7 @@ void x86emuOp_inc_BP(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x46
 ****************************************************************************/
-void x86emuOp_inc_SI(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_inc_SI(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3607,7 +3618,7 @@ void x86emuOp_inc_SI(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x47
 ****************************************************************************/
-void x86emuOp_inc_DI(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_inc_DI(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3629,7 +3640,7 @@ void x86emuOp_inc_DI(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x48
 ****************************************************************************/
-void x86emuOp_dec_AX(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_dec_AX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3651,7 +3662,7 @@ void x86emuOp_dec_AX(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x49
 ****************************************************************************/
-void x86emuOp_dec_CX(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_dec_CX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3673,7 +3684,7 @@ void x86emuOp_dec_CX(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x4a
 ****************************************************************************/
-void x86emuOp_dec_DX(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_dec_DX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3695,7 +3706,7 @@ void x86emuOp_dec_DX(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x4b
 ****************************************************************************/
-void x86emuOp_dec_BX(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_dec_BX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3717,7 +3728,7 @@ void x86emuOp_dec_BX(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x4c
 ****************************************************************************/
-void x86emuOp_dec_SP(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_dec_SP(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3739,7 +3750,7 @@ void x86emuOp_dec_SP(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x4d
 ****************************************************************************/
-void x86emuOp_dec_BP(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_dec_BP(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3761,7 +3772,7 @@ void x86emuOp_dec_BP(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x4e
 ****************************************************************************/
-void x86emuOp_dec_SI(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_dec_SI(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3783,7 +3794,7 @@ void x86emuOp_dec_SI(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x4f
 ****************************************************************************/
-void x86emuOp_dec_DI(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_dec_DI(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3805,7 +3816,7 @@ void x86emuOp_dec_DI(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x50
 ****************************************************************************/
-void x86emuOp_push_AX(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_push_AX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3827,7 +3838,7 @@ void x86emuOp_push_AX(u8 X86EMU_UNUSED(o
 REMARKS:
 Handles opcode 0x51
 ****************************************************************************/
-void x86emuOp_push_CX(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_push_CX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3849,7 +3860,7 @@ void x86emuOp_push_CX(u8 X86EMU_UNUSED(o
 REMARKS:
 Handles opcode 0x52
 ****************************************************************************/
-void x86emuOp_push_DX(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_push_DX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3871,7 +3882,7 @@ void x86emuOp_push_DX(u8 X86EMU_UNUSED(o
 REMARKS:
 Handles opcode 0x53
 ****************************************************************************/
-void x86emuOp_push_BX(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_push_BX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3893,7 +3904,7 @@ void x86emuOp_push_BX(u8 X86EMU_UNUSED(o
 REMARKS:
 Handles opcode 0x54
 ****************************************************************************/
-void x86emuOp_push_SP(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_push_SP(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3919,7 +3930,7 @@ void x86emuOp_push_SP(u8 X86EMU_UNUSED(o
 REMARKS:
 Handles opcode 0x55
 ****************************************************************************/
-void x86emuOp_push_BP(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_push_BP(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3941,7 +3952,7 @@ void x86emuOp_push_BP(u8 X86EMU_UNUSED(o
 REMARKS:
 Handles opcode 0x56
 ****************************************************************************/
-void x86emuOp_push_SI(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_push_SI(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3963,7 +3974,7 @@ void x86emuOp_push_SI(u8 X86EMU_UNUSED(o
 REMARKS:
 Handles opcode 0x57
 ****************************************************************************/
-void x86emuOp_push_DI(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_push_DI(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -3985,7 +3996,7 @@ void x86emuOp_push_DI(u8 X86EMU_UNUSED(o
 REMARKS:
 Handles opcode 0x58
 ****************************************************************************/
-void x86emuOp_pop_AX(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_pop_AX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -4007,7 +4018,7 @@ void x86emuOp_pop_AX(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x59
 ****************************************************************************/
-void x86emuOp_pop_CX(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_pop_CX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -4029,7 +4040,7 @@ void x86emuOp_pop_CX(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x5a
 ****************************************************************************/
-void x86emuOp_pop_DX(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_pop_DX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -4051,7 +4062,7 @@ void x86emuOp_pop_DX(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x5b
 ****************************************************************************/
-void x86emuOp_pop_BX(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_pop_BX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -4073,7 +4084,7 @@ void x86emuOp_pop_BX(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x5c
 ****************************************************************************/
-void x86emuOp_pop_SP(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_pop_SP(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -4095,7 +4106,7 @@ void x86emuOp_pop_SP(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x5d
 ****************************************************************************/
-void x86emuOp_pop_BP(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_pop_BP(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -4117,7 +4128,7 @@ void x86emuOp_pop_BP(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x5e
 ****************************************************************************/
-void x86emuOp_pop_SI(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_pop_SI(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -4139,7 +4150,7 @@ void x86emuOp_pop_SI(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x5f
 ****************************************************************************/
-void x86emuOp_pop_DI(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_pop_DI(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -4161,7 +4172,7 @@ void x86emuOp_pop_DI(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x60
 ****************************************************************************/
-void x86emuOp_push_all(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_push_all(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -4201,7 +4212,7 @@ void x86emuOp_push_all(u8 X86EMU_UNUSED(
 REMARKS:
 Handles opcode 0x61
 ****************************************************************************/
-void x86emuOp_pop_all(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_pop_all(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -4240,7 +4251,7 @@ void x86emuOp_pop_all(u8 X86EMU_UNUSED(o
 REMARKS:
 Handles opcode 0x64
 ****************************************************************************/
-void x86emuOp_segovr_FS(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_segovr_FS(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("FS:\n");
@@ -4257,7 +4268,7 @@ void x86emuOp_segovr_FS(u8 X86EMU_UNUSED
 REMARKS:
 Handles opcode 0x65
 ****************************************************************************/
-void x86emuOp_segovr_GS(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_segovr_GS(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("GS:\n");
@@ -4274,7 +4285,7 @@ void x86emuOp_segovr_GS(u8 X86EMU_UNUSED
 REMARKS:
 Handles opcode 0x66 - prefix for 32-bit register
 ****************************************************************************/
-void x86emuOp_prefix_data(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_prefix_data(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("DATA:\n");
@@ -4288,7 +4299,7 @@ void x86emuOp_prefix_data(u8 X86EMU_UNUS
 REMARKS:
 Handles opcode 0x67 - prefix for 32-bit address
 ****************************************************************************/
-void x86emuOp_prefix_addr(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_prefix_addr(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("ADDR:\n");
@@ -4302,7 +4313,7 @@ void x86emuOp_prefix_addr(u8 X86EMU_UNUS
 REMARKS:
 Handles opcode 0x68
 ****************************************************************************/
-void x86emuOp_push_word_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_push_word_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 imm;
 
@@ -4327,7 +4338,7 @@ void x86emuOp_push_word_IMM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x69
 ****************************************************************************/
-void x86emuOp_imul_word_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_imul_word_IMM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -4528,7 +4539,7 @@ void x86emuOp_imul_word_IMM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x6a
 ****************************************************************************/
-void x86emuOp_push_byte_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_push_byte_IMM(u8 X86EMU_UNUSED(op1))
 {
     s16 imm;
 
@@ -4536,7 +4547,11 @@ void x86emuOp_push_byte_IMM(u8 X86EMU_UN
     imm = (s8)fetch_byte_imm();
     DECODE_PRINTF2("PUSH\t%d\n", imm);
     TRACE_AND_STEP();
+    if (M.x86.mode & SYSMODE_PREFIX_DATA) {
+	push_long((s32)imm);
+    } else {
     push_word(imm);
+	}
     DECODE_CLEAR_SEGOVR();
     END_OF_INSTR();
 }
@@ -4545,7 +4560,7 @@ void x86emuOp_push_byte_IMM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x6b
 ****************************************************************************/
-void x86emuOp_imul_byte_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_imul_byte_IMM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -4739,7 +4754,7 @@ void x86emuOp_imul_byte_IMM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x6c
 ****************************************************************************/
-void x86emuOp_ins_byte(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_ins_byte(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("INSB\n");
@@ -4753,7 +4768,7 @@ void x86emuOp_ins_byte(u8 X86EMU_UNUSED(
 REMARKS:
 Handles opcode 0x6d
 ****************************************************************************/
-void x86emuOp_ins_word(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_ins_word(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -4772,7 +4787,7 @@ void x86emuOp_ins_word(u8 X86EMU_UNUSED(
 REMARKS:
 Handles opcode 0x6e
 ****************************************************************************/
-void x86emuOp_outs_byte(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_outs_byte(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("OUTSB\n");
@@ -4786,7 +4801,7 @@ void x86emuOp_outs_byte(u8 X86EMU_UNUSED
 REMARKS:
 Handles opcode 0x6f
 ****************************************************************************/
-void x86emuOp_outs_word(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_outs_word(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -4805,7 +4820,7 @@ void x86emuOp_outs_word(u8 X86EMU_UNUSED
 REMARKS:
 Handles opcode 0x70
 ****************************************************************************/
-void x86emuOp_jump_near_O(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_jump_near_O(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -4827,7 +4842,7 @@ void x86emuOp_jump_near_O(u8 X86EMU_UNUS
 REMARKS:
 Handles opcode 0x71
 ****************************************************************************/
-void x86emuOp_jump_near_NO(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_jump_near_NO(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -4849,7 +4864,7 @@ void x86emuOp_jump_near_NO(u8 X86EMU_UNU
 REMARKS:
 Handles opcode 0x72
 ****************************************************************************/
-void x86emuOp_jump_near_B(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_jump_near_B(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -4871,7 +4886,7 @@ void x86emuOp_jump_near_B(u8 X86EMU_UNUS
 REMARKS:
 Handles opcode 0x73
 ****************************************************************************/
-void x86emuOp_jump_near_NB(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_jump_near_NB(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -4893,7 +4908,7 @@ void x86emuOp_jump_near_NB(u8 X86EMU_UNU
 REMARKS:
 Handles opcode 0x74
 ****************************************************************************/
-void x86emuOp_jump_near_Z(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_jump_near_Z(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -4915,7 +4930,7 @@ void x86emuOp_jump_near_Z(u8 X86EMU_UNUS
 REMARKS:
 Handles opcode 0x75
 ****************************************************************************/
-void x86emuOp_jump_near_NZ(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_jump_near_NZ(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -4937,7 +4952,7 @@ void x86emuOp_jump_near_NZ(u8 X86EMU_UNU
 REMARKS:
 Handles opcode 0x76
 ****************************************************************************/
-void x86emuOp_jump_near_BE(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_jump_near_BE(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -4960,7 +4975,7 @@ void x86emuOp_jump_near_BE(u8 X86EMU_UNU
 REMARKS:
 Handles opcode 0x77
 ****************************************************************************/
-void x86emuOp_jump_near_NBE(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_jump_near_NBE(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -4983,7 +4998,7 @@ void x86emuOp_jump_near_NBE(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x78
 ****************************************************************************/
-void x86emuOp_jump_near_S(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_jump_near_S(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -5005,7 +5020,7 @@ void x86emuOp_jump_near_S(u8 X86EMU_UNUS
 REMARKS:
 Handles opcode 0x79
 ****************************************************************************/
-void x86emuOp_jump_near_NS(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_jump_near_NS(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -5027,7 +5042,7 @@ void x86emuOp_jump_near_NS(u8 X86EMU_UNU
 REMARKS:
 Handles opcode 0x7a
 ****************************************************************************/
-void x86emuOp_jump_near_P(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_jump_near_P(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -5049,7 +5064,7 @@ void x86emuOp_jump_near_P(u8 X86EMU_UNUS
 REMARKS:
 Handles opcode 0x7b
 ****************************************************************************/
-void x86emuOp_jump_near_NP(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_jump_near_NP(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -5071,7 +5086,7 @@ void x86emuOp_jump_near_NP(u8 X86EMU_UNU
 REMARKS:
 Handles opcode 0x7c
 ****************************************************************************/
-void x86emuOp_jump_near_L(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_jump_near_L(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -5096,7 +5111,7 @@ void x86emuOp_jump_near_L(u8 X86EMU_UNUS
 REMARKS:
 Handles opcode 0x7d
 ****************************************************************************/
-void x86emuOp_jump_near_NL(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_jump_near_NL(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -5122,7 +5137,7 @@ void x86emuOp_jump_near_NL(u8 X86EMU_UNU
 REMARKS:
 Handles opcode 0x7e
 ****************************************************************************/
-void x86emuOp_jump_near_LE(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_jump_near_LE(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -5148,7 +5163,7 @@ void x86emuOp_jump_near_LE(u8 X86EMU_UNU
 REMARKS:
 Handles opcode 0x7f
 ****************************************************************************/
-void x86emuOp_jump_near_NLE(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_jump_near_NLE(u8 X86EMU_UNUSED(op1))
 {
     s8 offset;
     u16 target;
@@ -5186,7 +5201,7 @@ static u8 (*opc80_byte_operation[])(u8 d
 REMARKS:
 Handles opcode 0x80
 ****************************************************************************/
-void x86emuOp_opc80_byte_RM_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_opc80_byte_RM_IMM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg;
@@ -5318,7 +5333,7 @@ static u32 (*opc81_long_operation[])(u32
 REMARKS:
 Handles opcode 0x81
 ****************************************************************************/
-void x86emuOp_opc81_word_RM_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_opc81_word_RM_IMM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -5505,7 +5520,7 @@ static u8 (*opc82_byte_operation[])(u8 s
 REMARKS:
 Handles opcode 0x82
 ****************************************************************************/
-void x86emuOp_opc82_byte_RM_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_opc82_byte_RM_IMM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg;
@@ -5633,7 +5648,7 @@ static u32 (*opc83_long_operation[])(u32
 REMARKS:
 Handles opcode 0x83
 ****************************************************************************/
-void x86emuOp_opc83_word_RM_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_opc83_word_RM_IMM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -5798,7 +5813,7 @@ void x86emuOp_opc83_word_RM_IMM(u8 X86EM
 REMARKS:
 Handles opcode 0x84
 ****************************************************************************/
-void x86emuOp_test_byte_RM_R(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_test_byte_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -5853,7 +5868,7 @@ void x86emuOp_test_byte_RM_R(u8 X86EMU_U
 REMARKS:
 Handles opcode 0x85
 ****************************************************************************/
-void x86emuOp_test_word_RM_R(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_test_word_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -5967,7 +5982,7 @@ void x86emuOp_test_word_RM_R(u8 X86EMU_U
 REMARKS:
 Handles opcode 0x86
 ****************************************************************************/
-void x86emuOp_xchg_byte_RM_R(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_xchg_byte_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -6034,7 +6049,7 @@ void x86emuOp_xchg_byte_RM_R(u8 X86EMU_U
 REMARKS:
 Handles opcode 0x87
 ****************************************************************************/
-void x86emuOp_xchg_word_RM_R(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_xchg_word_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -6172,7 +6187,7 @@ void x86emuOp_xchg_word_RM_R(u8 X86EMU_U
 REMARKS:
 Handles opcode 0x88
 ****************************************************************************/
-void x86emuOp_mov_byte_RM_R(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_byte_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -6223,10 +6238,10 @@ void x86emuOp_mov_byte_RM_R(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x89
 ****************************************************************************/
-void x86emuOp_mov_word_RM_R(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_word_RM_R(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
-    uint destoffset;
+    u32 destoffset;
 
     START_OF_INSTR();
     DECODE_PRINTF("MOV\t");
@@ -6325,7 +6340,7 @@ void x86emuOp_mov_word_RM_R(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x8a
 ****************************************************************************/
-void x86emuOp_mov_byte_R_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_byte_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg, *srcreg;
@@ -6380,7 +6395,7 @@ void x86emuOp_mov_byte_R_RM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x8b
 ****************************************************************************/
-void x86emuOp_mov_word_R_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_word_R_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -6494,7 +6509,7 @@ void x86emuOp_mov_word_R_RM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0x8c
 ****************************************************************************/
-void x86emuOp_mov_word_RM_SR(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_word_RM_SR(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u16 *destreg, *srcreg;
@@ -6549,7 +6564,7 @@ void x86emuOp_mov_word_RM_SR(u8 X86EMU_U
 REMARKS:
 Handles opcode 0x8d
 ****************************************************************************/
-void x86emuOp_lea_word_R_M(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_lea_word_R_M(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u16 *srcreg;
@@ -6601,7 +6616,7 @@ void x86emuOp_lea_word_R_M(u8 X86EMU_UNU
 REMARKS:
 Handles opcode 0x8e
 ****************************************************************************/
-void x86emuOp_mov_word_SR_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_word_SR_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u16 *destreg, *srcreg;
@@ -6662,7 +6677,7 @@ void x86emuOp_mov_word_SR_RM(u8 X86EMU_U
 REMARKS:
 Handles opcode 0x8f
 ****************************************************************************/
-void x86emuOp_pop_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_pop_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -6758,7 +6773,7 @@ void x86emuOp_pop_RM(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x90
 ****************************************************************************/
-void x86emuOp_nop(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_nop(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("NOP\n");
@@ -6771,7 +6786,7 @@ void x86emuOp_nop(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x91
 ****************************************************************************/
-void x86emuOp_xchg_word_AX_CX(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_xchg_word_AX_CX(u8 X86EMU_UNUSED(op1))
 {
     u32 tmp;
 
@@ -6799,7 +6814,7 @@ void x86emuOp_xchg_word_AX_CX(u8 X86EMU_
 REMARKS:
 Handles opcode 0x92
 ****************************************************************************/
-void x86emuOp_xchg_word_AX_DX(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_xchg_word_AX_DX(u8 X86EMU_UNUSED(op1))
 {
     u32 tmp;
 
@@ -6827,7 +6842,7 @@ void x86emuOp_xchg_word_AX_DX(u8 X86EMU_
 REMARKS:
 Handles opcode 0x93
 ****************************************************************************/
-void x86emuOp_xchg_word_AX_BX(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_xchg_word_AX_BX(u8 X86EMU_UNUSED(op1))
 {
     u32 tmp;
 
@@ -6855,7 +6870,7 @@ void x86emuOp_xchg_word_AX_BX(u8 X86EMU_
 REMARKS:
 Handles opcode 0x94
 ****************************************************************************/
-void x86emuOp_xchg_word_AX_SP(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_xchg_word_AX_SP(u8 X86EMU_UNUSED(op1))
 {
     u32 tmp;
 
@@ -6883,7 +6898,7 @@ void x86emuOp_xchg_word_AX_SP(u8 X86EMU_
 REMARKS:
 Handles opcode 0x95
 ****************************************************************************/
-void x86emuOp_xchg_word_AX_BP(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_xchg_word_AX_BP(u8 X86EMU_UNUSED(op1))
 {
     u32 tmp;
 
@@ -6911,7 +6926,7 @@ void x86emuOp_xchg_word_AX_BP(u8 X86EMU_
 REMARKS:
 Handles opcode 0x96
 ****************************************************************************/
-void x86emuOp_xchg_word_AX_SI(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_xchg_word_AX_SI(u8 X86EMU_UNUSED(op1))
 {
     u32 tmp;
 
@@ -6939,7 +6954,7 @@ void x86emuOp_xchg_word_AX_SI(u8 X86EMU_
 REMARKS:
 Handles opcode 0x97
 ****************************************************************************/
-void x86emuOp_xchg_word_AX_DI(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_xchg_word_AX_DI(u8 X86EMU_UNUSED(op1))
 {
     u32 tmp;
 
@@ -6967,7 +6982,7 @@ void x86emuOp_xchg_word_AX_DI(u8 X86EMU_
 REMARKS:
 Handles opcode 0x98
 ****************************************************************************/
-void x86emuOp_cbw(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_cbw(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -6997,7 +7012,7 @@ void x86emuOp_cbw(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x99
 ****************************************************************************/
-void x86emuOp_cwd(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_cwd(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -7028,7 +7043,7 @@ void x86emuOp_cwd(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0x9a
 ****************************************************************************/
-void x86emuOp_call_far_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_call_far_IMM(u8 X86EMU_UNUSED(op1))
 {
     u16 farseg, faroff;
 
@@ -7059,7 +7074,7 @@ void x86emuOp_call_far_IMM(u8 X86EMU_UNU
 REMARKS:
 Handles opcode 0x9b
 ****************************************************************************/
-void x86emuOp_wait(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_wait(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("WAIT");
@@ -7073,7 +7088,7 @@ void x86emuOp_wait(u8 X86EMU_UNUSED(op1)
 REMARKS:
 Handles opcode 0x9c
 ****************************************************************************/
-void x86emuOp_pushf_word(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_pushf_word(u8 X86EMU_UNUSED(op1))
 {
     u32 flags;
 
@@ -7100,7 +7115,7 @@ void x86emuOp_pushf_word(u8 X86EMU_UNUSE
 REMARKS:
 Handles opcode 0x9d
 ****************************************************************************/
-void x86emuOp_popf_word(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_popf_word(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -7122,7 +7137,7 @@ void x86emuOp_popf_word(u8 X86EMU_UNUSED
 REMARKS:
 Handles opcode 0x9e
 ****************************************************************************/
-void x86emuOp_sahf(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_sahf(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("SAHF\n");
@@ -7139,7 +7154,7 @@ void x86emuOp_sahf(u8 X86EMU_UNUSED(op1)
 REMARKS:
 Handles opcode 0x9f
 ****************************************************************************/
-void x86emuOp_lahf(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_lahf(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("LAHF\n");
@@ -7156,7 +7171,7 @@ void x86emuOp_lahf(u8 X86EMU_UNUSED(op1)
 REMARKS:
 Handles opcode 0xa0
 ****************************************************************************/
-void x86emuOp_mov_AL_M_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_AL_M_IMM(u8 X86EMU_UNUSED(op1))
 {
     u16 offset;
 
@@ -7174,7 +7189,7 @@ void x86emuOp_mov_AL_M_IMM(u8 X86EMU_UNU
 REMARKS:
 Handles opcode 0xa1
 ****************************************************************************/
-void x86emuOp_mov_AX_M_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_AX_M_IMM(u8 X86EMU_UNUSED(op1))
 {
     u16 offset;
 
@@ -7199,7 +7214,7 @@ void x86emuOp_mov_AX_M_IMM(u8 X86EMU_UNU
 REMARKS:
 Handles opcode 0xa2
 ****************************************************************************/
-void x86emuOp_mov_M_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_M_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u16 offset;
 
@@ -7217,7 +7232,7 @@ void x86emuOp_mov_M_AL_IMM(u8 X86EMU_UNU
 REMARKS:
 Handles opcode 0xa3
 ****************************************************************************/
-void x86emuOp_mov_M_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_M_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u16 offset;
 
@@ -7242,7 +7257,7 @@ void x86emuOp_mov_M_AX_IMM(u8 X86EMU_UNU
 REMARKS:
 Handles opcode 0xa4
 ****************************************************************************/
-void x86emuOp_movs_byte(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_movs_byte(u8 X86EMU_UNUSED(op1))
 {
     u8  val;
     u32 count;
@@ -7277,7 +7292,7 @@ void x86emuOp_movs_byte(u8 X86EMU_UNUSED
 REMARKS:
 Handles opcode 0xa5
 ****************************************************************************/
-void x86emuOp_movs_word(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_movs_word(u8 X86EMU_UNUSED(op1))
 {
     u32 val;
     int inc;
@@ -7325,7 +7340,7 @@ void x86emuOp_movs_word(u8 X86EMU_UNUSED
 REMARKS:
 Handles opcode 0xa6
 ****************************************************************************/
-void x86emuOp_cmps_byte(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_cmps_byte(u8 X86EMU_UNUSED(op1))
 {
     s8 val1, val2;
     int inc;
@@ -7381,7 +7396,7 @@ void x86emuOp_cmps_byte(u8 X86EMU_UNUSED
 REMARKS:
 Handles opcode 0xa7
 ****************************************************************************/
-void x86emuOp_cmps_word(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_cmps_word(u8 X86EMU_UNUSED(op1))
 {
     u32 val1,val2;
     int inc;
@@ -7462,7 +7477,7 @@ void x86emuOp_cmps_word(u8 X86EMU_UNUSED
 REMARKS:
 Handles opcode 0xa8
 ****************************************************************************/
-void x86emuOp_test_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_test_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     int imm;
 
@@ -7480,7 +7495,7 @@ void x86emuOp_test_AL_IMM(u8 X86EMU_UNUS
 REMARKS:
 Handles opcode 0xa9
 ****************************************************************************/
-void x86emuOp_test_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_test_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -7507,7 +7522,7 @@ void x86emuOp_test_AX_IMM(u8 X86EMU_UNUS
 REMARKS:
 Handles opcode 0xaa
 ****************************************************************************/
-void x86emuOp_stos_byte(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_stos_byte(u8 X86EMU_UNUSED(op1))
 {
     int inc;
 
@@ -7539,7 +7554,7 @@ void x86emuOp_stos_byte(u8 X86EMU_UNUSED
 REMARKS:
 Handles opcode 0xab
 ****************************************************************************/
-void x86emuOp_stos_word(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_stos_word(u8 X86EMU_UNUSED(op1))
 {
     int inc;
     u32 count;
@@ -7583,7 +7598,7 @@ void x86emuOp_stos_word(u8 X86EMU_UNUSED
 REMARKS:
 Handles opcode 0xac
 ****************************************************************************/
-void x86emuOp_lods_byte(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_lods_byte(u8 X86EMU_UNUSED(op1))
 {
     int inc;
 
@@ -7615,7 +7630,7 @@ void x86emuOp_lods_byte(u8 X86EMU_UNUSED
 REMARKS:
 Handles opcode 0xad
 ****************************************************************************/
-void x86emuOp_lods_word(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_lods_word(u8 X86EMU_UNUSED(op1))
 {
     int inc;
     u32 count;
@@ -7659,7 +7674,7 @@ void x86emuOp_lods_word(u8 X86EMU_UNUSED
 REMARKS:
 Handles opcode 0xae
 ****************************************************************************/
-void x86emuOp_scas_byte(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_scas_byte(u8 X86EMU_UNUSED(op1))
 {
     s8 val2;
     int inc;
@@ -7708,7 +7723,7 @@ void x86emuOp_scas_byte(u8 X86EMU_UNUSED
 REMARKS:
 Handles opcode 0xaf
 ****************************************************************************/
-void x86emuOp_scas_word(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_scas_word(u8 X86EMU_UNUSED(op1))
 {
     int inc;
     u32 val;
@@ -7780,7 +7795,7 @@ void x86emuOp_scas_word(u8 X86EMU_UNUSED
 REMARKS:
 Handles opcode 0xb0
 ****************************************************************************/
-void x86emuOp_mov_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 imm;
 
@@ -7798,7 +7813,7 @@ void x86emuOp_mov_byte_AL_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0xb1
 ****************************************************************************/
-void x86emuOp_mov_byte_CL_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_byte_CL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 imm;
 
@@ -7816,7 +7831,7 @@ void x86emuOp_mov_byte_CL_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0xb2
 ****************************************************************************/
-void x86emuOp_mov_byte_DL_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_byte_DL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 imm;
 
@@ -7834,7 +7849,7 @@ void x86emuOp_mov_byte_DL_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0xb3
 ****************************************************************************/
-void x86emuOp_mov_byte_BL_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_byte_BL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 imm;
 
@@ -7852,7 +7867,7 @@ void x86emuOp_mov_byte_BL_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0xb4
 ****************************************************************************/
-void x86emuOp_mov_byte_AH_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_byte_AH_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 imm;
 
@@ -7870,7 +7885,7 @@ void x86emuOp_mov_byte_AH_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0xb5
 ****************************************************************************/
-void x86emuOp_mov_byte_CH_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_byte_CH_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 imm;
 
@@ -7888,7 +7903,7 @@ void x86emuOp_mov_byte_CH_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0xb6
 ****************************************************************************/
-void x86emuOp_mov_byte_DH_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_byte_DH_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 imm;
 
@@ -7906,7 +7921,7 @@ void x86emuOp_mov_byte_DH_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0xb7
 ****************************************************************************/
-void x86emuOp_mov_byte_BH_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_byte_BH_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 imm;
 
@@ -7924,7 +7939,7 @@ void x86emuOp_mov_byte_BH_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0xb8
 ****************************************************************************/
-void x86emuOp_mov_word_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -7951,7 +7966,7 @@ void x86emuOp_mov_word_AX_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0xb9
 ****************************************************************************/
-void x86emuOp_mov_word_CX_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_word_CX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -7978,7 +7993,7 @@ void x86emuOp_mov_word_CX_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0xba
 ****************************************************************************/
-void x86emuOp_mov_word_DX_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_word_DX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -8005,7 +8020,7 @@ void x86emuOp_mov_word_DX_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0xbb
 ****************************************************************************/
-void x86emuOp_mov_word_BX_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_word_BX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -8032,7 +8047,7 @@ void x86emuOp_mov_word_BX_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0xbc
 ****************************************************************************/
-void x86emuOp_mov_word_SP_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_word_SP_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -8059,7 +8074,7 @@ void x86emuOp_mov_word_SP_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0xbd
 ****************************************************************************/
-void x86emuOp_mov_word_BP_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_word_BP_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -8086,7 +8101,7 @@ void x86emuOp_mov_word_BP_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0xbe
 ****************************************************************************/
-void x86emuOp_mov_word_SI_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_word_SI_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -8113,7 +8128,7 @@ void x86emuOp_mov_word_SI_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0xbf
 ****************************************************************************/
-void x86emuOp_mov_word_DI_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_word_DI_IMM(u8 X86EMU_UNUSED(op1))
 {
     u32 srcval;
 
@@ -8153,7 +8168,7 @@ static u8(*opcD0_byte_operation[])(u8 d,
 REMARKS:
 Handles opcode 0xc0
 ****************************************************************************/
-void x86emuOp_opcC0_byte_RM_MEM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_opcC0_byte_RM_MEM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg;
@@ -8279,7 +8294,7 @@ static u32 (*opcD1_long_operation[])(u32
 REMARKS:
 Handles opcode 0xc1
 ****************************************************************************/
-void x86emuOp_opcC1_word_RM_MEM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_opcC1_word_RM_MEM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -8433,7 +8448,7 @@ void x86emuOp_opcC1_word_RM_MEM(u8 X86EM
 REMARKS:
 Handles opcode 0xc2
 ****************************************************************************/
-void x86emuOp_ret_near_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_ret_near_IMM(u8 X86EMU_UNUSED(op1))
 {
     u16 imm;
 
@@ -8453,7 +8468,7 @@ void x86emuOp_ret_near_IMM(u8 X86EMU_UNU
 REMARKS:
 Handles opcode 0xc3
 ****************************************************************************/
-void x86emuOp_ret_near(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_ret_near(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("RET\n");
@@ -8468,7 +8483,7 @@ void x86emuOp_ret_near(u8 X86EMU_UNUSED(
 REMARKS:
 Handles opcode 0xc4
 ****************************************************************************/
-void x86emuOp_les_R_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_les_R_IMM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rh, rl;
     u16 *dstreg;
@@ -8517,7 +8532,7 @@ void x86emuOp_les_R_IMM(u8 X86EMU_UNUSED
 REMARKS:
 Handles opcode 0xc5
 ****************************************************************************/
-void x86emuOp_lds_R_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_lds_R_IMM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rh, rl;
     u16 *dstreg;
@@ -8566,7 +8581,7 @@ void x86emuOp_lds_R_IMM(u8 X86EMU_UNUSED
 REMARKS:
 Handles opcode 0xc6
 ****************************************************************************/
-void x86emuOp_mov_byte_RM_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_byte_RM_IMM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg;
@@ -8621,7 +8636,7 @@ void x86emuOp_mov_byte_RM_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0xc7
 ****************************************************************************/
-void x86emuOp_mov_word_RM_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_mov_word_RM_IMM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -8727,7 +8742,7 @@ void x86emuOp_mov_word_RM_IMM(u8 X86EMU_
 REMARKS:
 Handles opcode 0xc8
 ****************************************************************************/
-void x86emuOp_enter(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_enter(u8 X86EMU_UNUSED(op1))
 {
     u16 local,frame_pointer;
     u8  nesting;
@@ -8758,7 +8773,7 @@ void x86emuOp_enter(u8 X86EMU_UNUSED(op1
 REMARKS:
 Handles opcode 0xc9
 ****************************************************************************/
-void x86emuOp_leave(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_leave(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("LEAVE\n");
@@ -8773,7 +8788,7 @@ void x86emuOp_leave(u8 X86EMU_UNUSED(op1
 REMARKS:
 Handles opcode 0xca
 ****************************************************************************/
-void x86emuOp_ret_far_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_ret_far_IMM(u8 X86EMU_UNUSED(op1))
 {
     u16 imm;
 
@@ -8794,7 +8809,7 @@ void x86emuOp_ret_far_IMM(u8 X86EMU_UNUS
 REMARKS:
 Handles opcode 0xcb
 ****************************************************************************/
-void x86emuOp_ret_far(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_ret_far(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("RETF\n");
@@ -8810,7 +8825,7 @@ void x86emuOp_ret_far(u8 X86EMU_UNUSED(o
 REMARKS:
 Handles opcode 0xcc
 ****************************************************************************/
-void x86emuOp_int3(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_int3(u8 X86EMU_UNUSED(op1))
 {
     u16 tmp;
 
@@ -8838,7 +8853,7 @@ void x86emuOp_int3(u8 X86EMU_UNUSED(op1)
 REMARKS:
 Handles opcode 0xcd
 ****************************************************************************/
-void x86emuOp_int_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_int_IMM(u8 X86EMU_UNUSED(op1))
 {
     u16 tmp;
     u8 intnum;
@@ -8868,7 +8883,7 @@ void x86emuOp_int_IMM(u8 X86EMU_UNUSED(o
 REMARKS:
 Handles opcode 0xce
 ****************************************************************************/
-void x86emuOp_into(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_into(u8 X86EMU_UNUSED(op1))
 {
     u16 tmp;
 
@@ -8897,7 +8912,7 @@ void x86emuOp_into(u8 X86EMU_UNUSED(op1)
 REMARKS:
 Handles opcode 0xcf
 ****************************************************************************/
-void x86emuOp_iret(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_iret(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("IRET\n");
@@ -8915,7 +8930,7 @@ void x86emuOp_iret(u8 X86EMU_UNUSED(op1)
 REMARKS:
 Handles opcode 0xd0
 ****************************************************************************/
-void x86emuOp_opcD0_byte_RM_1(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_opcD0_byte_RM_1(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg;
@@ -9009,7 +9024,7 @@ void x86emuOp_opcD0_byte_RM_1(u8 X86EMU_
 REMARKS:
 Handles opcode 0xd1
 ****************************************************************************/
-void x86emuOp_opcD1_word_RM_1(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_opcD1_word_RM_1(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -9157,7 +9172,7 @@ void x86emuOp_opcD1_word_RM_1(u8 X86EMU_
 REMARKS:
 Handles opcode 0xd2
 ****************************************************************************/
-void x86emuOp_opcD2_byte_RM_CL(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_opcD2_byte_RM_CL(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg;
@@ -9253,7 +9268,7 @@ void x86emuOp_opcD2_byte_RM_CL(u8 X86EMU
 REMARKS:
 Handles opcode 0xd3
 ****************************************************************************/
-void x86emuOp_opcD3_word_RM_CL(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_opcD3_word_RM_CL(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -9399,7 +9414,7 @@ void x86emuOp_opcD3_word_RM_CL(u8 X86EMU
 REMARKS:
 Handles opcode 0xd4
 ****************************************************************************/
-void x86emuOp_aam(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_aam(u8 X86EMU_UNUSED(op1))
 {
     u8 a;
 
@@ -9422,13 +9437,20 @@ void x86emuOp_aam(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xd5
 ****************************************************************************/
-void x86emuOp_aad(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_aad(u8 X86EMU_UNUSED(op1))
 {
     u8 a;
 
     START_OF_INSTR();
     DECODE_PRINTF("AAD\n");
     a = fetch_byte_imm();
+    if (a != 10) {
+	/* fix: add base decoding
+	   aad_word(u16 val, int base a) */
+        DECODE_PRINTF("ERROR DECODING AAM\n");
+        TRACE_REGS();
+        HALT_SYS();
+    }
     TRACE_AND_STEP();
     M.x86.R_AX = aad_word(M.x86.R_AX);
     DECODE_CLEAR_SEGOVR();
@@ -9441,7 +9463,7 @@ void x86emuOp_aad(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xd7
 ****************************************************************************/
-void x86emuOp_xlat(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_xlat(u8 X86EMU_UNUSED(op1))
 {
     u16 addr;
 
@@ -9460,7 +9482,7 @@ void x86emuOp_xlat(u8 X86EMU_UNUSED(op1)
 REMARKS:
 Handles opcode 0xe0
 ****************************************************************************/
-void x86emuOp_loopne(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_loopne(u8 X86EMU_UNUSED(op1))
 {
     s16 ip;
 
@@ -9481,7 +9503,7 @@ void x86emuOp_loopne(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0xe1
 ****************************************************************************/
-void x86emuOp_loope(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_loope(u8 X86EMU_UNUSED(op1))
 {
     s16 ip;
 
@@ -9502,7 +9524,7 @@ void x86emuOp_loope(u8 X86EMU_UNUSED(op1
 REMARKS:
 Handles opcode 0xe2
 ****************************************************************************/
-void x86emuOp_loop(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_loop(u8 X86EMU_UNUSED(op1))
 {
     s16 ip;
 
@@ -9523,7 +9545,7 @@ void x86emuOp_loop(u8 X86EMU_UNUSED(op1)
 REMARKS:
 Handles opcode 0xe3
 ****************************************************************************/
-void x86emuOp_jcxz(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_jcxz(u8 X86EMU_UNUSED(op1))
 {
     u16 target;
     s8  offset;
@@ -9545,7 +9567,7 @@ void x86emuOp_jcxz(u8 X86EMU_UNUSED(op1)
 REMARKS:
 Handles opcode 0xe4
 ****************************************************************************/
-void x86emuOp_in_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_in_byte_AL_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 port;
 
@@ -9563,7 +9585,7 @@ void x86emuOp_in_byte_AL_IMM(u8 X86EMU_U
 REMARKS:
 Handles opcode 0xe5
 ****************************************************************************/
-void x86emuOp_in_word_AX_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_in_word_AX_IMM(u8 X86EMU_UNUSED(op1))
 {
     u8 port;
 
@@ -9589,7 +9611,7 @@ void x86emuOp_in_word_AX_IMM(u8 X86EMU_U
 REMARKS:
 Handles opcode 0xe6
 ****************************************************************************/
-void x86emuOp_out_byte_IMM_AL(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_out_byte_IMM_AL(u8 X86EMU_UNUSED(op1))
 {
     u8 port;
 
@@ -9607,7 +9629,7 @@ void x86emuOp_out_byte_IMM_AL(u8 X86EMU_
 REMARKS:
 Handles opcode 0xe7
 ****************************************************************************/
-void x86emuOp_out_word_IMM_AX(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_out_word_IMM_AX(u8 X86EMU_UNUSED(op1))
 {
     u8 port;
 
@@ -9633,7 +9655,7 @@ void x86emuOp_out_word_IMM_AX(u8 X86EMU_
 REMARKS:
 Handles opcode 0xe8
 ****************************************************************************/
-void x86emuOp_call_near_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_call_near_IMM(u8 X86EMU_UNUSED(op1))
 {
     s16 ip;
 
@@ -9641,7 +9663,7 @@ void x86emuOp_call_near_IMM(u8 X86EMU_UN
 	DECODE_PRINTF("CALL\t");
 	ip = (s16) fetch_word_imm();
 	ip += (s16) M.x86.R_IP;    /* CHECK SIGN */
-	DECODE_PRINTF2("%04x\n", ip);
+	DECODE_PRINTF2("%04x\n", (u16)ip);
 	CALL_TRACE(M.x86.saved_cs, M.x86.saved_ip, M.x86.R_CS, ip, "");
     TRACE_AND_STEP();
     push_word(M.x86.R_IP);
@@ -9654,7 +9676,7 @@ void x86emuOp_call_near_IMM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0xe9
 ****************************************************************************/
-void x86emuOp_jump_near_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_jump_near_IMM(u8 X86EMU_UNUSED(op1))
 {
     int ip;
 
@@ -9662,7 +9684,7 @@ void x86emuOp_jump_near_IMM(u8 X86EMU_UN
     DECODE_PRINTF("JMP\t");
     ip = (s16)fetch_word_imm();
     ip += (s16)M.x86.R_IP;
-    DECODE_PRINTF2("%04x\n", ip);
+    DECODE_PRINTF2("%04x\n", (u16)ip);
     TRACE_AND_STEP();
     M.x86.R_IP = (u16)ip;
     DECODE_CLEAR_SEGOVR();
@@ -9673,7 +9695,7 @@ void x86emuOp_jump_near_IMM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0xea
 ****************************************************************************/
-void x86emuOp_jump_far_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_jump_far_IMM(u8 X86EMU_UNUSED(op1))
 {
     u16 cs, ip;
 
@@ -9694,7 +9716,7 @@ void x86emuOp_jump_far_IMM(u8 X86EMU_UNU
 REMARKS:
 Handles opcode 0xeb
 ****************************************************************************/
-void x86emuOp_jump_byte_IMM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_jump_byte_IMM(u8 X86EMU_UNUSED(op1))
 {
     u16 target;
     s8 offset;
@@ -9714,7 +9736,7 @@ void x86emuOp_jump_byte_IMM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0xec
 ****************************************************************************/
-void x86emuOp_in_byte_AL_DX(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_in_byte_AL_DX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("IN\tAL,DX\n");
@@ -9728,7 +9750,7 @@ void x86emuOp_in_byte_AL_DX(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0xed
 ****************************************************************************/
-void x86emuOp_in_word_AX_DX(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_in_word_AX_DX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -9750,7 +9772,7 @@ void x86emuOp_in_word_AX_DX(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0xee
 ****************************************************************************/
-void x86emuOp_out_byte_DX_AL(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_out_byte_DX_AL(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("OUT\tDX,AL\n");
@@ -9764,7 +9786,7 @@ void x86emuOp_out_byte_DX_AL(u8 X86EMU_U
 REMARKS:
 Handles opcode 0xef
 ****************************************************************************/
-void x86emuOp_out_word_DX_AX(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_out_word_DX_AX(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     if (M.x86.mode & SYSMODE_PREFIX_DATA) {
@@ -9786,7 +9808,7 @@ void x86emuOp_out_word_DX_AX(u8 X86EMU_U
 REMARKS:
 Handles opcode 0xf0
 ****************************************************************************/
-void x86emuOp_lock(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_lock(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("LOCK:\n");
@@ -9801,7 +9823,7 @@ void x86emuOp_lock(u8 X86EMU_UNUSED(op1)
 REMARKS:
 Handles opcode 0xf2
 ****************************************************************************/
-void x86emuOp_repne(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_repne(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("REPNE\n");
@@ -9815,7 +9837,7 @@ void x86emuOp_repne(u8 X86EMU_UNUSED(op1
 REMARKS:
 Handles opcode 0xf3
 ****************************************************************************/
-void x86emuOp_repe(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_repe(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("REPE\n");
@@ -9829,7 +9851,7 @@ void x86emuOp_repe(u8 X86EMU_UNUSED(op1)
 REMARKS:
 Handles opcode 0xf4
 ****************************************************************************/
-void x86emuOp_halt(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_halt(u8 X86EMU_UNUSED(op1))
 {
     START_OF_INSTR();
     DECODE_PRINTF("HALT\n");
@@ -9843,7 +9865,7 @@ void x86emuOp_halt(u8 X86EMU_UNUSED(op1)
 REMARKS:
 Handles opcode 0xf5
 ****************************************************************************/
-void x86emuOp_cmc(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_cmc(u8 X86EMU_UNUSED(op1))
 {
     /* complement the carry flag. */
     START_OF_INSTR();
@@ -9858,7 +9880,7 @@ void x86emuOp_cmc(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xf6
 ****************************************************************************/
-void x86emuOp_opcF6_byte_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_opcF6_byte_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     u8 *destreg;
@@ -10142,7 +10164,7 @@ void x86emuOp_opcF6_byte_RM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0xf7
 ****************************************************************************/
-void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_opcF7_word_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -10797,7 +10819,7 @@ void x86emuOp_opcF7_word_RM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0xf8
 ****************************************************************************/
-void x86emuOp_clc(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_clc(u8 X86EMU_UNUSED(op1))
 {
     /* clear the carry flag. */
     START_OF_INSTR();
@@ -10812,7 +10834,7 @@ void x86emuOp_clc(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xf9
 ****************************************************************************/
-void x86emuOp_stc(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_stc(u8 X86EMU_UNUSED(op1))
 {
     /* set the carry flag. */
     START_OF_INSTR();
@@ -10827,7 +10849,7 @@ void x86emuOp_stc(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xfa
 ****************************************************************************/
-void x86emuOp_cli(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_cli(u8 X86EMU_UNUSED(op1))
 {
     /* clear interrupts. */
     START_OF_INSTR();
@@ -10842,7 +10864,7 @@ void x86emuOp_cli(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xfb
 ****************************************************************************/
-void x86emuOp_sti(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_sti(u8 X86EMU_UNUSED(op1))
 {
     /* enable  interrupts. */
     START_OF_INSTR();
@@ -10857,7 +10879,7 @@ void x86emuOp_sti(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xfc
 ****************************************************************************/
-void x86emuOp_cld(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_cld(u8 X86EMU_UNUSED(op1))
 {
     /* clear interrupts. */
     START_OF_INSTR();
@@ -10872,7 +10894,7 @@ void x86emuOp_cld(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xfd
 ****************************************************************************/
-void x86emuOp_std(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_std(u8 X86EMU_UNUSED(op1))
 {
     /* clear interrupts. */
     START_OF_INSTR();
@@ -10887,7 +10909,7 @@ void x86emuOp_std(u8 X86EMU_UNUSED(op1))
 REMARKS:
 Handles opcode 0xfe
 ****************************************************************************/
-void x86emuOp_opcFE_byte_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_opcFE_byte_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rh, rl;
     u8 destval;
@@ -11004,7 +11026,7 @@ void x86emuOp_opcFE_byte_RM(u8 X86EMU_UN
 REMARKS:
 Handles opcode 0xff
 ****************************************************************************/
-void x86emuOp_opcFF_word_RM(u8 X86EMU_UNUSED(op1))
+static void x86emuOp_opcFF_word_RM(u8 X86EMU_UNUSED(op1))
 {
     int mod, rh, rl;
     uint destoffset = 0;
@@ -11037,7 +11059,7 @@ void x86emuOp_opcFF_word_RM(u8 X86EMU_UN
             }
             break;
         case 2:
-            DECODE_PRINTF("CALL\t ");
+            DECODE_PRINTF("CALL\t");
             break;
         case 3:
             DECODE_PRINTF("CALL\tFAR ");
--- x86emu-0.8/scitech/src/x86emu/ops2.c.orig	2001-08-14 19:35:06.000000000 +0200
+++ x86emu-0.8/scitech/src/x86emu/ops2.c	2008-01-26 20:43:42.049878237 +0100
@@ -49,7 +49,7 @@ op1 - Instruction op code
 REMARKS:
 Handles illegal opcodes.
 ****************************************************************************/
-void x86emuOp2_illegal_op(
+static void x86emuOp2_illegal_op(
 	u8 op2)
 {
 	START_OF_INSTR();
@@ -65,9 +65,43 @@ void x86emuOp2_illegal_op(
 
 /****************************************************************************
 REMARKS:
+Handles opcode 0x0f,0x31
+****************************************************************************/
+static void x86emuOp2_rdtsc(u8 X86EMU_UNUSED(op2))
+{
+#ifdef __HAS_LONG_LONG__
+    static u64 counter = 0;
+#else
+    static u32 counter = 0;
+#endif
+
+    counter += 0x10000;
+
+    /* read timestamp counter */
+    /*
+     * Note that instead of actually trying to accurately measure this, we just
+     * increase the counter by a fixed amount every time we hit one of these
+     * instructions.  Feel free to come up with a better method.
+     */
+    START_OF_INSTR();
+    DECODE_PRINTF("RDTSC\n");
+    TRACE_AND_STEP();
+#ifdef __HAS_LONG_LONG__
+    M.x86.R_EAX = counter & 0xffffffff;
+    M.x86.R_EDX = counter >> 32;
+#else
+    M.x86.R_EAX = counter;
+    M.x86.R_EDX = 0;
+#endif
+    DECODE_CLEAR_SEGOVR();
+    END_OF_INSTR();
+}
+
+/****************************************************************************
+REMARKS:
 Handles opcode 0x0f,0x80-0x8F
 ****************************************************************************/
-void x86emuOp2_long_jump(u8 op2)
+static void x86emuOp2_long_jump(u8 op2)
 {
     s32 target;
     char *name = 0;
@@ -130,7 +164,7 @@ void x86emuOp2_long_jump(u8 op2)
         break;
       case 0x8d:
         name = "JNL\t";
-        cond = xorl(ACCESS_FLAG(F_SF), ACCESS_FLAG(F_OF));
+        cond = !(xorl(ACCESS_FLAG(F_SF), ACCESS_FLAG(F_OF)));
         break;
       case 0x8e:
         name = "JLE\t";
@@ -158,7 +192,7 @@ void x86emuOp2_long_jump(u8 op2)
 REMARKS:
 Handles opcode 0x0f,0x90-0x9F
 ****************************************************************************/
-void x86emuOp2_set_byte(u8 op2)
+static void x86emuOp2_set_byte(u8 op2)
 {
     int mod, rl, rh;
     uint destoffset;
@@ -267,7 +301,7 @@ void x86emuOp2_set_byte(u8 op2)
 REMARKS:
 Handles opcode 0x0f,0xa0
 ****************************************************************************/
-void x86emuOp2_push_FS(u8 X86EMU_UNUSED(op2))
+static void x86emuOp2_push_FS(u8 X86EMU_UNUSED(op2))
 {
     START_OF_INSTR();
     DECODE_PRINTF("PUSH\tFS\n");
@@ -281,7 +315,7 @@ void x86emuOp2_push_FS(u8 X86EMU_UNUSED(
 REMARKS:
 Handles opcode 0x0f,0xa1
 ****************************************************************************/
-void x86emuOp2_pop_FS(u8 X86EMU_UNUSED(op2))
+static void x86emuOp2_pop_FS(u8 X86EMU_UNUSED(op2))
 {
     START_OF_INSTR();
     DECODE_PRINTF("POP\tFS\n");
@@ -295,7 +329,7 @@ void x86emuOp2_pop_FS(u8 X86EMU_UNUSED(o
 REMARKS:
 Handles opcode 0x0f,0xa3
 ****************************************************************************/
-void x86emuOp2_bt_R(u8 X86EMU_UNUSED(op2))
+static void x86emuOp2_bt_R(u8 X86EMU_UNUSED(op2))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -416,7 +450,7 @@ void x86emuOp2_bt_R(u8 X86EMU_UNUSED(op2
 REMARKS:
 Handles opcode 0x0f,0xa4
 ****************************************************************************/
-void x86emuOp2_shld_IMM(u8 X86EMU_UNUSED(op2))
+static void x86emuOp2_shld_IMM(u8 X86EMU_UNUSED(op2))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -553,7 +587,7 @@ void x86emuOp2_shld_IMM(u8 X86EMU_UNUSED
 REMARKS:
 Handles opcode 0x0f,0xa5
 ****************************************************************************/
-void x86emuOp2_shld_CL(u8 X86EMU_UNUSED(op2))
+static void x86emuOp2_shld_CL(u8 X86EMU_UNUSED(op2))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -673,7 +707,7 @@ void x86emuOp2_shld_CL(u8 X86EMU_UNUSED(
 REMARKS:
 Handles opcode 0x0f,0xa8
 ****************************************************************************/
-void x86emuOp2_push_GS(u8 X86EMU_UNUSED(op2))
+static void x86emuOp2_push_GS(u8 X86EMU_UNUSED(op2))
 {
     START_OF_INSTR();
     DECODE_PRINTF("PUSH\tGS\n");
@@ -687,7 +721,7 @@ void x86emuOp2_push_GS(u8 X86EMU_UNUSED(
 REMARKS:
 Handles opcode 0x0f,0xa9
 ****************************************************************************/
-void x86emuOp2_pop_GS(u8 X86EMU_UNUSED(op2))
+static void x86emuOp2_pop_GS(u8 X86EMU_UNUSED(op2))
 {
     START_OF_INSTR();
     DECODE_PRINTF("POP\tGS\n");
@@ -699,9 +733,9 @@ void x86emuOp2_pop_GS(u8 X86EMU_UNUSED(o
 
 /****************************************************************************
 REMARKS:
-Handles opcode 0x0f,0xaa
+Handles opcode 0x0f,0xab
 ****************************************************************************/
-void x86emuOp2_bts_R(u8 X86EMU_UNUSED(op2))
+static void x86emuOp2_bts_R(u8 X86EMU_UNUSED(op2))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -840,7 +874,7 @@ void x86emuOp2_bts_R(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x0f,0xac
 ****************************************************************************/
-void x86emuOp2_shrd_IMM(u8 X86EMU_UNUSED(op2))
+static void x86emuOp2_shrd_IMM(u8 X86EMU_UNUSED(op2))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -977,7 +1011,7 @@ void x86emuOp2_shrd_IMM(u8 X86EMU_UNUSED
 REMARKS:
 Handles opcode 0x0f,0xad
 ****************************************************************************/
-void x86emuOp2_shrd_CL(u8 X86EMU_UNUSED(op2))
+static void x86emuOp2_shrd_CL(u8 X86EMU_UNUSED(op2))
 {
     int mod, rl, rh;
     uint destoffset;
@@ -1097,7 +1131,7 @@ void x86emuOp2_shrd_CL(u8 X86EMU_UNUSED(
 REMARKS:
 Handles opcode 0x0f,0xaf
 ****************************************************************************/
-void x86emuOp2_imul_R_RM(u8 X86EMU_UNUSED(op2))
+static void x86emuOp2_imul_R_RM(u8 X86EMU_UNUSED(op2))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -1274,7 +1308,7 @@ void x86emuOp2_imul_R_RM(u8 X86EMU_UNUSE
 REMARKS:
 Handles opcode 0x0f,0xb2
 ****************************************************************************/
-void x86emuOp2_lss_R_IMM(u8 X86EMU_UNUSED(op2))
+static void x86emuOp2_lss_R_IMM(u8 X86EMU_UNUSED(op2))
 {
 	int mod, rh, rl;
     u16 *dstreg;
@@ -1323,7 +1357,7 @@ void x86emuOp2_lss_R_IMM(u8 X86EMU_UNUSE
 REMARKS:
 Handles opcode 0x0f,0xb3
 ****************************************************************************/
-void x86emuOp2_btr_R(u8 X86EMU_UNUSED(op2))
+static void x86emuOp2_btr_R(u8 X86EMU_UNUSED(op2))
 {
 	int mod, rl, rh;
 	uint srcoffset;
@@ -1462,7 +1496,7 @@ void x86emuOp2_btr_R(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x0f,0xb4
 ****************************************************************************/
-void x86emuOp2_lfs_R_IMM(u8 X86EMU_UNUSED(op2))
+static void x86emuOp2_lfs_R_IMM(u8 X86EMU_UNUSED(op2))
 {
 	int mod, rh, rl;
     u16 *dstreg;
@@ -1511,7 +1545,7 @@ void x86emuOp2_lfs_R_IMM(u8 X86EMU_UNUSE
 REMARKS:
 Handles opcode 0x0f,0xb5
 ****************************************************************************/
-void x86emuOp2_lgs_R_IMM(u8 X86EMU_UNUSED(op2))
+static void x86emuOp2_lgs_R_IMM(u8 X86EMU_UNUSED(op2))
 {
 	int mod, rh, rl;
     u16 *dstreg;
@@ -1560,7 +1594,7 @@ void x86emuOp2_lgs_R_IMM(u8 X86EMU_UNUSE
 REMARKS:
 Handles opcode 0x0f,0xb6
 ****************************************************************************/
-void x86emuOp2_movzx_byte_R_RM(u8 X86EMU_UNUSED(op2))
+static void x86emuOp2_movzx_byte_R_RM(u8 X86EMU_UNUSED(op2))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -1676,7 +1710,7 @@ void x86emuOp2_movzx_byte_R_RM(u8 X86EMU
 REMARKS:
 Handles opcode 0x0f,0xb7
 ****************************************************************************/
-void x86emuOp2_movzx_word_R_RM(u8 X86EMU_UNUSED(op2))
+static void x86emuOp2_movzx_word_R_RM(u8 X86EMU_UNUSED(op2))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -1732,7 +1766,7 @@ void x86emuOp2_movzx_word_R_RM(u8 X86EMU
 REMARKS:
 Handles opcode 0x0f,0xba
 ****************************************************************************/
-void x86emuOp2_btX_I(u8 X86EMU_UNUSED(op2))
+static void x86emuOp2_btX_I(u8 X86EMU_UNUSED(op2))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -1741,16 +1775,16 @@ void x86emuOp2_btX_I(u8 X86EMU_UNUSED(op
     START_OF_INSTR();
     FETCH_DECODE_MODRM(mod, rh, rl);
     switch (rh) {
-    case 3:
+    case 4:
         DECODE_PRINTF("BT\t");
         break;
-    case 4:
+    case 5:
         DECODE_PRINTF("BTS\t");
         break;
-    case 5:
+    case 6:
         DECODE_PRINTF("BTR\t");
         break;
-    case 6:
+    case 7:
         DECODE_PRINTF("BTC\t");
         break;
     default:
@@ -1775,13 +1809,13 @@ void x86emuOp2_btX_I(u8 X86EMU_UNUSED(op
             mask = (0x1 << bit);
             CONDITIONAL_SET_FLAG(srcval & mask,F_CF);
             switch (rh) {
-            case 4:
+            case 5:
                 store_data_long(srcoffset, srcval | mask);
                 break;
-            case 5:
+            case 6:
                 store_data_long(srcoffset, srcval & ~mask);
                 break;
-            case 6:
+            case 7:
                 store_data_long(srcoffset, srcval ^ mask);
                 break;
             default:
@@ -1800,13 +1834,13 @@ void x86emuOp2_btX_I(u8 X86EMU_UNUSED(op
             mask = (0x1 << bit);
             CONDITIONAL_SET_FLAG(srcval & mask,F_CF);
             switch (rh) {
-            case 4:
+            case 5:
                 store_data_word(srcoffset, srcval | mask);
                 break;
-            case 5:
+            case 6:
                 store_data_word(srcoffset, srcval & ~mask);
                 break;
-            case 6:
+            case 7:
                 store_data_word(srcoffset, srcval ^ mask);
                 break;
             default:
@@ -1828,13 +1862,13 @@ void x86emuOp2_btX_I(u8 X86EMU_UNUSED(op
             mask = (0x1 << bit);
             CONDITIONAL_SET_FLAG(srcval & mask,F_CF);
             switch (rh) {
-            case 4:
+            case 5:
                 store_data_long(srcoffset, srcval | mask);
                 break;
-            case 5:
+            case 6:
                 store_data_long(srcoffset, srcval & ~mask);
                 break;
-            case 6:
+            case 7:
                 store_data_long(srcoffset, srcval ^ mask);
                 break;
             default:
@@ -1853,13 +1887,13 @@ void x86emuOp2_btX_I(u8 X86EMU_UNUSED(op
             mask = (0x1 << bit);
             CONDITIONAL_SET_FLAG(srcval & mask,F_CF);
             switch (rh) {
-            case 4:
+            case 5:
                 store_data_word(srcoffset, srcval | mask);
                 break;
-            case 5:
+            case 6:
                 store_data_word(srcoffset, srcval & ~mask);
                 break;
-            case 6:
+            case 7:
                 store_data_word(srcoffset, srcval ^ mask);
                 break;
             default:
@@ -1881,13 +1915,13 @@ void x86emuOp2_btX_I(u8 X86EMU_UNUSED(op
             mask = (0x1 << bit);
             CONDITIONAL_SET_FLAG(srcval & mask,F_CF);
             switch (rh) {
-            case 4:
+            case 5:
                 store_data_long(srcoffset, srcval | mask);
                 break;
-            case 5:
+            case 6:
                 store_data_long(srcoffset, srcval & ~mask);
                 break;
-            case 6:
+            case 7:
                 store_data_long(srcoffset, srcval ^ mask);
                 break;
             default:
@@ -1906,13 +1940,13 @@ void x86emuOp2_btX_I(u8 X86EMU_UNUSED(op
             mask = (0x1 << bit);
             CONDITIONAL_SET_FLAG(srcval & mask,F_CF);
             switch (rh) {
-            case 4:
+            case 5:
                 store_data_word(srcoffset, srcval | mask);
                 break;
-            case 5:
+            case 6:
                 store_data_word(srcoffset, srcval & ~mask);
                 break;
-            case 6:
+            case 7:
                 store_data_word(srcoffset, srcval ^ mask);
                 break;
             default:
@@ -1934,13 +1968,13 @@ void x86emuOp2_btX_I(u8 X86EMU_UNUSED(op
             mask = (0x1 << bit);
             CONDITIONAL_SET_FLAG(*srcreg & mask,F_CF);
             switch (rh) {
-            case 4:
+            case 5:
                 *srcreg |= mask;
                 break;
-            case 5:
+            case 6:
                 *srcreg &= ~mask;
                 break;
-            case 6:
+            case 7:
                 *srcreg ^= mask;
                 break;
             default:
@@ -1959,13 +1993,13 @@ void x86emuOp2_btX_I(u8 X86EMU_UNUSED(op
             mask = (0x1 << bit);
             CONDITIONAL_SET_FLAG(*srcreg & mask,F_CF);
             switch (rh) {
-            case 4:
+            case 5:
                 *srcreg |= mask;
                 break;
-            case 5:
+            case 6:
                 *srcreg &= ~mask;
                 break;
-            case 6:
+            case 7:
                 *srcreg ^= mask;
                 break;
             default:
@@ -1982,7 +2016,7 @@ void x86emuOp2_btX_I(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x0f,0xbb
 ****************************************************************************/
-void x86emuOp2_btc_R(u8 X86EMU_UNUSED(op2))
+static void x86emuOp2_btc_R(u8 X86EMU_UNUSED(op2))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -2121,7 +2155,7 @@ void x86emuOp2_btc_R(u8 X86EMU_UNUSED(op
 REMARKS:
 Handles opcode 0x0f,0xbc
 ****************************************************************************/
-void x86emuOp2_bsf(u8 X86EMU_UNUSED(op2))
+static void x86emuOp2_bsf(u8 X86EMU_UNUSED(op2))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -2207,25 +2241,25 @@ void x86emuOp2_bsf(u8 X86EMU_UNUSED(op2)
 	break;
     case 3:				/* register to register */
 	if (M.x86.mode & SYSMODE_PREFIX_DATA) {
-	    u32 *srcreg, *dstreg;
+	    u32 srcval, *dstreg;
 
-	    srcreg = DECODE_RM_LONG_REGISTER(rl);
+	    srcval = *DECODE_RM_LONG_REGISTER(rl);
 	    DECODE_PRINTF(",");
 	    dstreg = DECODE_RM_LONG_REGISTER(rh);
 	    TRACE_AND_STEP();
-	    CONDITIONAL_SET_FLAG(*srcreg == 0, F_ZF);
+	    CONDITIONAL_SET_FLAG(srcval == 0, F_ZF);
 	    for(*dstreg = 0; *dstreg < 32; (*dstreg)++)
-		if ((*srcreg >> *dstreg) & 1) break;
+		if ((srcval >> *dstreg) & 1) break;
 	} else {
-	    u16 *srcreg, *dstreg;
+	    u16 srcval, *dstreg;
 
-	    srcreg = DECODE_RM_WORD_REGISTER(rl);
+	    srcval = *DECODE_RM_WORD_REGISTER(rl);
 	    DECODE_PRINTF(",");
 	    dstreg = DECODE_RM_WORD_REGISTER(rh);
 	    TRACE_AND_STEP();
-	    CONDITIONAL_SET_FLAG(*srcreg == 0, F_ZF);
+	    CONDITIONAL_SET_FLAG(srcval == 0, F_ZF);
 	    for(*dstreg = 0; *dstreg < 16; (*dstreg)++)
-		if ((*srcreg >> *dstreg) & 1) break;
+		if ((srcval >> *dstreg) & 1) break;
 	}
 	break;
     }
@@ -2237,13 +2271,13 @@ void x86emuOp2_bsf(u8 X86EMU_UNUSED(op2)
 REMARKS:
 Handles opcode 0x0f,0xbd
 ****************************************************************************/
-void x86emuOp2_bsr(u8 X86EMU_UNUSED(op2))
+static void x86emuOp2_bsr(u8 X86EMU_UNUSED(op2))
 {
     int mod, rl, rh;
     uint srcoffset;
 
     START_OF_INSTR();
-    DECODE_PRINTF("BSF\n");
+    DECODE_PRINTF("BSR\t");
     FETCH_DECODE_MODRM(mod, rh, rl);
     switch(mod) {
     case 0:
@@ -2323,25 +2357,25 @@ void x86emuOp2_bsr(u8 X86EMU_UNUSED(op2)
 	break;
     case 3:				/* register to register */
 	if (M.x86.mode & SYSMODE_PREFIX_DATA) {
-	    u32 *srcreg, *dstreg;
+	    u32 srcval, *dstreg;
 
-	    srcreg = DECODE_RM_LONG_REGISTER(rl);
+	    srcval = *DECODE_RM_LONG_REGISTER(rl);
 	    DECODE_PRINTF(",");
 	    dstreg = DECODE_RM_LONG_REGISTER(rh);
 	    TRACE_AND_STEP();
-	    CONDITIONAL_SET_FLAG(*srcreg == 0, F_ZF);
+	    CONDITIONAL_SET_FLAG(srcval == 0, F_ZF);
 	    for(*dstreg = 31; *dstreg > 0; (*dstreg)--)
-		if ((*srcreg >> *dstreg) & 1) break;
+		if ((srcval >> *dstreg) & 1) break;
 	} else {
-	    u16 *srcreg, *dstreg;
+	    u16 srcval, *dstreg;
 
-	    srcreg = DECODE_RM_WORD_REGISTER(rl);
+	    srcval = *DECODE_RM_WORD_REGISTER(rl);
 	    DECODE_PRINTF(",");
 	    dstreg = DECODE_RM_WORD_REGISTER(rh);
 	    TRACE_AND_STEP();
-	    CONDITIONAL_SET_FLAG(*srcreg == 0, F_ZF);
+	    CONDITIONAL_SET_FLAG(srcval == 0, F_ZF);
 	    for(*dstreg = 15; *dstreg > 0; (*dstreg)--)
-		if ((*srcreg >> *dstreg) & 1) break;
+		if ((srcval >> *dstreg) & 1) break;
 	}
 	break;
     }
@@ -2353,7 +2387,7 @@ void x86emuOp2_bsr(u8 X86EMU_UNUSED(op2)
 REMARKS:
 Handles opcode 0x0f,0xbe
 ****************************************************************************/
-void x86emuOp2_movsx_byte_R_RM(u8 X86EMU_UNUSED(op2))
+static void x86emuOp2_movsx_byte_R_RM(u8 X86EMU_UNUSED(op2))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -2469,7 +2503,7 @@ void x86emuOp2_movsx_byte_R_RM(u8 X86EMU
 REMARKS:
 Handles opcode 0x0f,0xbf
 ****************************************************************************/
-void x86emuOp2_movsx_word_R_RM(u8 X86EMU_UNUSED(op2))
+static void x86emuOp2_movsx_word_R_RM(u8 X86EMU_UNUSED(op2))
 {
     int mod, rl, rh;
     uint srcoffset;
@@ -2578,7 +2612,7 @@ void (*x86emu_optab2[256])(u8) =
 /*  0x2f */ x86emuOp2_illegal_op,
 
 /*  0x30 */ x86emuOp2_illegal_op,
-/*  0x31 */ x86emuOp2_illegal_op,
+/*  0x31 */ x86emuOp2_rdtsc,
 /*  0x32 */ x86emuOp2_illegal_op,
 /*  0x33 */ x86emuOp2_illegal_op,
 /*  0x34 */ x86emuOp2_illegal_op,
@@ -2707,7 +2741,7 @@ void (*x86emu_optab2[256])(u8) =
 /*  0xa8 */ x86emuOp2_push_GS,
 /*  0xa9 */ x86emuOp2_pop_GS,
 /*  0xaa */ x86emuOp2_illegal_op,
-/*  0xab */ x86emuOp2_bt_R,
+/*  0xab */ x86emuOp2_bts_R,
 /*  0xac */ x86emuOp2_shrd_IMM,
 /*  0xad */ x86emuOp2_shrd_CL,
 /*  0xae */ x86emuOp2_illegal_op,
--- x86emu-0.8/scitech/src/x86emu/prim_ops.c.orig	2001-08-14 19:35:06.000000000 +0200
+++ x86emu-0.8/scitech/src/x86emu/prim_ops.c	2008-01-26 20:44:41.713278260 +0100
@@ -97,13 +97,13 @@
 *
 ****************************************************************************/
 
+#include <stdlib.h>
+
 #define	PRIM_OPS_NO_REDEFINE_ASM
 #include "x86emu/x86emui.h"
 
 /*------------------------- Global Variables ------------------------------*/
 
-#ifndef	__HAVE_INLINE_ASSEMBLER__
-
 static u32 x86emu_parity_tab[8] =
 {
 	0x96696996,
@@ -116,15 +116,11 @@ static u32 x86emu_parity_tab[8] =
 	0x69969669,
 };
 
-#endif
-
 #define PARITY(x)   (((x86emu_parity_tab[(x) / 32] >> ((x) % 32)) & 1) == 0)
 #define XOR2(x) 	(((x) ^ ((x)>>1)) & 0x1)
 
 /*----------------------------- Implementation ----------------------------*/
 
-#ifndef	__HAVE_INLINE_ASSEMBLER__
-
 /****************************************************************************
 REMARKS:
 Implements the AAA instruction and side effects.
@@ -2086,7 +2082,7 @@ Implements the IMUL instruction and side
 void imul_long_direct(u32 *res_lo, u32* res_hi,u32 d, u32 s)
 {
 #ifdef	__HAS_LONG_LONG__
-	s64 res = (s32)d * (s32)s;
+	s64 res = (s64)(s32)d * (s32)s;
 
 	*res_lo = (u32)res;
 	*res_hi = (u32)(res >> 32);
@@ -2178,7 +2174,7 @@ Implements the MUL instruction and side 
 void mul_long(u32 s)
 {
 #ifdef	__HAS_LONG_LONG__
-	u64 res = (u32)M.x86.R_EAX * (u32)s;
+	u64 res = (u64)M.x86.R_EAX * s;
 
 	M.x86.R_EAX = (u32)res;
 	M.x86.R_EDX = (u32)(res >> 32);
@@ -2454,8 +2450,6 @@ void div_long(u32 s)
 	M.x86.R_EDX = (u32)mod;
 }
 
-#endif	/* __HAVE_INLINE_ASSEMBLER__ */
-
 /****************************************************************************
 REMARKS:
 Implements the IN string instruction and side effects.
@@ -2660,7 +2654,7 @@ DB(	if (CHECK_SP_ACCESS())
     return res;
 }
 
-#ifdef	__HAVE_INLINE_ASSEMBLER__
+#if 0
 
 u16 aaa_word (u16 d)
 { return aaa_word_asm(&M.x86.R_EFLG,d); }
--- x86emu-0.8/scitech/src/x86emu/sys.c.orig	2001-08-14 19:35:06.000000000 +0200
+++ x86emu-0.8/scitech/src/x86emu/sys.c	2008-01-26 20:48:19.905712339 +0100
@@ -41,10 +41,13 @@
 ****************************************************************************/
 
 #include "x86emu.h"
+#include "x86emu/x86emui.h"
 #include "x86emu/regs.h"
 #include "x86emu/debug.h"
 #include "x86emu/prim_ops.h"
+#ifndef NO_SYS_HEADERS
 #include <string.h>
+#endif                                                                                           
 
 /*------------------------- Global Variables ------------------------------*/
 
@@ -52,9 +55,10 @@ X86EMU_sysEnv		_X86EMU_env;		/* Global e
 X86EMU_intrFuncs	_X86EMU_intrTab[256];
 
 /*----------------------------- Implementation ----------------------------*/
-#ifdef __alpha__
+#if defined(__alpha__) || defined(__alpha)
 /* to cope with broken egcs-1.1.2 :-(((( */
 
+#define ALPHA_UALOADS
 /*
  * inline functions to do unaligned accesses
  * from linux/include/asm-alpha/unaligned.h
@@ -207,7 +211,8 @@ static __inline__ void stw_u(unsigned lo
 #endif
 }
 
-#elif defined (__ia64__)
+#elif defined (__ia64__) || defined(ia64__)
+#define IA64_UALOADS
 /*
  * EGCS 1.1 knows about arbitrary unaligned loads.  Define some
  * packed structures to talk about such things with.
@@ -311,9 +316,9 @@ u16 X86API rdw(
 		}
 	else
 #endif
-#ifdef __alpha__
+#if defined(ALPHA_UALOADS)
 		val = ldw_u((u16*)(M.mem_base + addr));
-#elif defined (__ia64__)
+#elif  defined(IA64_UALOADS)
 	  val = uldw((u16*)(M.mem_base + addr));
 #else
 		val = *(u16*)(M.mem_base + addr);
@@ -350,9 +355,9 @@ u32 X86API rdl(
 		}
 	else
 #endif
-#ifdef __alpha__
+#if defined(ALPHA_UALOADS)
 		val = ldl_u((u32*)(M.mem_base + addr));
-#elif defined (__ia64__)
+#elif  defined(IA64_UALOADS)
 		val = uldl((u32*)(M.mem_base + addr));
 #else
 		val = *(u32*)(M.mem_base + addr);
@@ -408,9 +413,9 @@ DB(	if (DEBUG_MEM_TRACE())
 		}
 	else
 #endif
-#ifdef __alpha__
+#if defined(ALPHA_UALOADS)
 	 stw_u(val,(u16*)(M.mem_base + addr));
-#elif defined (__ia64__)
+#elif defined(IA64_UALOADS)
 	 ustw(val,(u16*)(M.mem_base + addr));
 #else
 	 *(u16*)(M.mem_base + addr) = val;
@@ -444,9 +449,9 @@ DB(	if (DEBUG_MEM_TRACE())
 		}
 	else
 #endif
-#ifdef __alpha__
+#if defined(ALPHA_UALOADS)
 	 stl_u(val,(u32*)(M.mem_base + addr));
-#elif defined (__ia64__)
+#elif defined(IA64_UALOADS)
 	 ustl(val,(u32*)(M.mem_base + addr));
 #else
 	 *(u32*)(M.mem_base + addr) = val;
--- x86emu-0.8/scitech/src/x86emu/x86emu/decode.h.orig	2001-08-14 19:35:06.000000000 +0200
+++ x86emu-0.8/scitech/src/x86emu/x86emu/decode.h	2008-01-26 21:02:24.985870712 +0100
@@ -76,9 +76,10 @@ u8* 	decode_rm_byte_register(int reg);
 u16* 	decode_rm_word_register(int reg);
 u32* 	decode_rm_long_register(int reg);
 u16* 	decode_rm_seg_register(int reg);
-unsigned decode_rm00_address(int rm);
-unsigned decode_rm01_address(int rm);
-unsigned decode_rm10_address(int rm);
+u32	decode_rm00_address(int rm);
+u32	decode_rm01_address(int rm);
+u32	decode_rm10_address(int rm);
+u32	decode_sib_address(int sib, int mod);
 
 #ifdef  __cplusplus
 }                       			/* End of "C" linkage for C++   	*/
